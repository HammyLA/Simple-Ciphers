
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Key
 * 
 */
export type Key = $Result.DefaultSelection<Prisma.$KeyPayload>
/**
 * Model UserStatistics
 * 
 */
export type UserStatistics = $Result.DefaultSelection<Prisma.$UserStatisticsPayload>
/**
 * Model GlobalStatistics
 * 
 */
export type GlobalStatistics = $Result.DefaultSelection<Prisma.$GlobalStatisticsPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs, $Utils.Call<Prisma.TypeMapCb, {
    extArgs: ExtArgs
  }>, ClientOptions>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.key`: Exposes CRUD operations for the **Key** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Keys
    * const keys = await prisma.key.findMany()
    * ```
    */
  get key(): Prisma.KeyDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userStatistics`: Exposes CRUD operations for the **UserStatistics** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserStatistics
    * const userStatistics = await prisma.userStatistics.findMany()
    * ```
    */
  get userStatistics(): Prisma.UserStatisticsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.globalStatistics`: Exposes CRUD operations for the **GlobalStatistics** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GlobalStatistics
    * const globalStatistics = await prisma.globalStatistics.findMany()
    * ```
    */
  get globalStatistics(): Prisma.GlobalStatisticsDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.4.1
   * Query Engine version: a9055b89e58b4b5bfb59600785423b1db3d0e75d
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Key: 'Key',
    UserStatistics: 'UserStatistics',
    GlobalStatistics: 'GlobalStatistics'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "key" | "userStatistics" | "globalStatistics"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Key: {
        payload: Prisma.$KeyPayload<ExtArgs>
        fields: Prisma.KeyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.KeyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.KeyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeyPayload>
          }
          findFirst: {
            args: Prisma.KeyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.KeyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeyPayload>
          }
          findMany: {
            args: Prisma.KeyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeyPayload>[]
          }
          create: {
            args: Prisma.KeyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeyPayload>
          }
          createMany: {
            args: Prisma.KeyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.KeyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeyPayload>[]
          }
          delete: {
            args: Prisma.KeyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeyPayload>
          }
          update: {
            args: Prisma.KeyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeyPayload>
          }
          deleteMany: {
            args: Prisma.KeyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.KeyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.KeyUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeyPayload>[]
          }
          upsert: {
            args: Prisma.KeyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeyPayload>
          }
          aggregate: {
            args: Prisma.KeyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateKey>
          }
          groupBy: {
            args: Prisma.KeyGroupByArgs<ExtArgs>
            result: $Utils.Optional<KeyGroupByOutputType>[]
          }
          count: {
            args: Prisma.KeyCountArgs<ExtArgs>
            result: $Utils.Optional<KeyCountAggregateOutputType> | number
          }
        }
      }
      UserStatistics: {
        payload: Prisma.$UserStatisticsPayload<ExtArgs>
        fields: Prisma.UserStatisticsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserStatisticsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStatisticsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserStatisticsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStatisticsPayload>
          }
          findFirst: {
            args: Prisma.UserStatisticsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStatisticsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserStatisticsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStatisticsPayload>
          }
          findMany: {
            args: Prisma.UserStatisticsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStatisticsPayload>[]
          }
          create: {
            args: Prisma.UserStatisticsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStatisticsPayload>
          }
          createMany: {
            args: Prisma.UserStatisticsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserStatisticsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStatisticsPayload>[]
          }
          delete: {
            args: Prisma.UserStatisticsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStatisticsPayload>
          }
          update: {
            args: Prisma.UserStatisticsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStatisticsPayload>
          }
          deleteMany: {
            args: Prisma.UserStatisticsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserStatisticsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserStatisticsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStatisticsPayload>[]
          }
          upsert: {
            args: Prisma.UserStatisticsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStatisticsPayload>
          }
          aggregate: {
            args: Prisma.UserStatisticsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserStatistics>
          }
          groupBy: {
            args: Prisma.UserStatisticsGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserStatisticsGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserStatisticsCountArgs<ExtArgs>
            result: $Utils.Optional<UserStatisticsCountAggregateOutputType> | number
          }
        }
      }
      GlobalStatistics: {
        payload: Prisma.$GlobalStatisticsPayload<ExtArgs>
        fields: Prisma.GlobalStatisticsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GlobalStatisticsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GlobalStatisticsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GlobalStatisticsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GlobalStatisticsPayload>
          }
          findFirst: {
            args: Prisma.GlobalStatisticsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GlobalStatisticsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GlobalStatisticsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GlobalStatisticsPayload>
          }
          findMany: {
            args: Prisma.GlobalStatisticsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GlobalStatisticsPayload>[]
          }
          create: {
            args: Prisma.GlobalStatisticsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GlobalStatisticsPayload>
          }
          createMany: {
            args: Prisma.GlobalStatisticsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GlobalStatisticsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GlobalStatisticsPayload>[]
          }
          delete: {
            args: Prisma.GlobalStatisticsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GlobalStatisticsPayload>
          }
          update: {
            args: Prisma.GlobalStatisticsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GlobalStatisticsPayload>
          }
          deleteMany: {
            args: Prisma.GlobalStatisticsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GlobalStatisticsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.GlobalStatisticsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GlobalStatisticsPayload>[]
          }
          upsert: {
            args: Prisma.GlobalStatisticsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GlobalStatisticsPayload>
          }
          aggregate: {
            args: Prisma.GlobalStatisticsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGlobalStatistics>
          }
          groupBy: {
            args: Prisma.GlobalStatisticsGroupByArgs<ExtArgs>
            result: $Utils.Optional<GlobalStatisticsGroupByOutputType>[]
          }
          count: {
            args: Prisma.GlobalStatisticsCountArgs<ExtArgs>
            result: $Utils.Optional<GlobalStatisticsCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    key?: KeyOmit
    userStatistics?: UserStatisticsOmit
    globalStatistics?: GlobalStatisticsOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    keys: number
    statistics: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    keys?: boolean | UserCountOutputTypeCountKeysArgs
    statistics?: boolean | UserCountOutputTypeCountStatisticsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountKeysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KeyWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountStatisticsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserStatisticsWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    email: string | null
    username: string | null
    password: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    email: string | null
    username: string | null
    password: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    username: number
    password: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    username?: true
    password?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    username?: true
    password?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    username?: true
    password?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    email: string
    username: string
    password: string
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    username?: boolean
    password?: boolean
    keys?: boolean | User$keysArgs<ExtArgs>
    statistics?: boolean | User$statisticsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    username?: boolean
    password?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    username?: boolean
    password?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    username?: boolean
    password?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "username" | "password", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    keys?: boolean | User$keysArgs<ExtArgs>
    statistics?: boolean | User$statisticsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      keys: Prisma.$KeyPayload<ExtArgs>[]
      statistics: Prisma.$UserStatisticsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      email: string
      username: string
      password: string
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    keys<T extends User$keysArgs<ExtArgs> = {}>(args?: Subset<T, User$keysArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KeyPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    statistics<T extends User$statisticsArgs<ExtArgs> = {}>(args?: Subset<T, User$statisticsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserStatisticsPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly email: FieldRef<"User", 'String'>
    readonly username: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.keys
   */
  export type User$keysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Key
     */
    select?: KeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Key
     */
    omit?: KeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeyInclude<ExtArgs> | null
    where?: KeyWhereInput
    orderBy?: KeyOrderByWithRelationInput | KeyOrderByWithRelationInput[]
    cursor?: KeyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: KeyScalarFieldEnum | KeyScalarFieldEnum[]
  }

  /**
   * User.statistics
   */
  export type User$statisticsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStatistics
     */
    select?: UserStatisticsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserStatistics
     */
    omit?: UserStatisticsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStatisticsInclude<ExtArgs> | null
    where?: UserStatisticsWhereInput
    orderBy?: UserStatisticsOrderByWithRelationInput | UserStatisticsOrderByWithRelationInput[]
    cursor?: UserStatisticsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserStatisticsScalarFieldEnum | UserStatisticsScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Key
   */

  export type AggregateKey = {
    _count: KeyCountAggregateOutputType | null
    _avg: KeyAvgAggregateOutputType | null
    _sum: KeySumAggregateOutputType | null
    _min: KeyMinAggregateOutputType | null
    _max: KeyMaxAggregateOutputType | null
  }

  export type KeyAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type KeySumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type KeyMinAggregateOutputType = {
    id: number | null
    key: string | null
    userId: number | null
    dateCreated: Date | null
  }

  export type KeyMaxAggregateOutputType = {
    id: number | null
    key: string | null
    userId: number | null
    dateCreated: Date | null
  }

  export type KeyCountAggregateOutputType = {
    id: number
    key: number
    userId: number
    dateCreated: number
    _all: number
  }


  export type KeyAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type KeySumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type KeyMinAggregateInputType = {
    id?: true
    key?: true
    userId?: true
    dateCreated?: true
  }

  export type KeyMaxAggregateInputType = {
    id?: true
    key?: true
    userId?: true
    dateCreated?: true
  }

  export type KeyCountAggregateInputType = {
    id?: true
    key?: true
    userId?: true
    dateCreated?: true
    _all?: true
  }

  export type KeyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Key to aggregate.
     */
    where?: KeyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Keys to fetch.
     */
    orderBy?: KeyOrderByWithRelationInput | KeyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: KeyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Keys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Keys.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Keys
    **/
    _count?: true | KeyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: KeyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: KeySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: KeyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: KeyMaxAggregateInputType
  }

  export type GetKeyAggregateType<T extends KeyAggregateArgs> = {
        [P in keyof T & keyof AggregateKey]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateKey[P]>
      : GetScalarType<T[P], AggregateKey[P]>
  }




  export type KeyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KeyWhereInput
    orderBy?: KeyOrderByWithAggregationInput | KeyOrderByWithAggregationInput[]
    by: KeyScalarFieldEnum[] | KeyScalarFieldEnum
    having?: KeyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: KeyCountAggregateInputType | true
    _avg?: KeyAvgAggregateInputType
    _sum?: KeySumAggregateInputType
    _min?: KeyMinAggregateInputType
    _max?: KeyMaxAggregateInputType
  }

  export type KeyGroupByOutputType = {
    id: number
    key: string
    userId: number
    dateCreated: Date
    _count: KeyCountAggregateOutputType | null
    _avg: KeyAvgAggregateOutputType | null
    _sum: KeySumAggregateOutputType | null
    _min: KeyMinAggregateOutputType | null
    _max: KeyMaxAggregateOutputType | null
  }

  type GetKeyGroupByPayload<T extends KeyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<KeyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof KeyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], KeyGroupByOutputType[P]>
            : GetScalarType<T[P], KeyGroupByOutputType[P]>
        }
      >
    >


  export type KeySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    key?: boolean
    userId?: boolean
    dateCreated?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["key"]>

  export type KeySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    key?: boolean
    userId?: boolean
    dateCreated?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["key"]>

  export type KeySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    key?: boolean
    userId?: boolean
    dateCreated?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["key"]>

  export type KeySelectScalar = {
    id?: boolean
    key?: boolean
    userId?: boolean
    dateCreated?: boolean
  }

  export type KeyOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "key" | "userId" | "dateCreated", ExtArgs["result"]["key"]>
  export type KeyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type KeyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type KeyIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $KeyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Key"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      key: string
      userId: number
      dateCreated: Date
    }, ExtArgs["result"]["key"]>
    composites: {}
  }

  type KeyGetPayload<S extends boolean | null | undefined | KeyDefaultArgs> = $Result.GetResult<Prisma.$KeyPayload, S>

  type KeyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<KeyFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: KeyCountAggregateInputType | true
    }

  export interface KeyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Key'], meta: { name: 'Key' } }
    /**
     * Find zero or one Key that matches the filter.
     * @param {KeyFindUniqueArgs} args - Arguments to find a Key
     * @example
     * // Get one Key
     * const key = await prisma.key.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends KeyFindUniqueArgs>(args: SelectSubset<T, KeyFindUniqueArgs<ExtArgs>>): Prisma__KeyClient<$Result.GetResult<Prisma.$KeyPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Key that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {KeyFindUniqueOrThrowArgs} args - Arguments to find a Key
     * @example
     * // Get one Key
     * const key = await prisma.key.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends KeyFindUniqueOrThrowArgs>(args: SelectSubset<T, KeyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__KeyClient<$Result.GetResult<Prisma.$KeyPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Key that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeyFindFirstArgs} args - Arguments to find a Key
     * @example
     * // Get one Key
     * const key = await prisma.key.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends KeyFindFirstArgs>(args?: SelectSubset<T, KeyFindFirstArgs<ExtArgs>>): Prisma__KeyClient<$Result.GetResult<Prisma.$KeyPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Key that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeyFindFirstOrThrowArgs} args - Arguments to find a Key
     * @example
     * // Get one Key
     * const key = await prisma.key.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends KeyFindFirstOrThrowArgs>(args?: SelectSubset<T, KeyFindFirstOrThrowArgs<ExtArgs>>): Prisma__KeyClient<$Result.GetResult<Prisma.$KeyPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Keys that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Keys
     * const keys = await prisma.key.findMany()
     * 
     * // Get first 10 Keys
     * const keys = await prisma.key.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const keyWithIdOnly = await prisma.key.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends KeyFindManyArgs>(args?: SelectSubset<T, KeyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KeyPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Key.
     * @param {KeyCreateArgs} args - Arguments to create a Key.
     * @example
     * // Create one Key
     * const Key = await prisma.key.create({
     *   data: {
     *     // ... data to create a Key
     *   }
     * })
     * 
     */
    create<T extends KeyCreateArgs>(args: SelectSubset<T, KeyCreateArgs<ExtArgs>>): Prisma__KeyClient<$Result.GetResult<Prisma.$KeyPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Keys.
     * @param {KeyCreateManyArgs} args - Arguments to create many Keys.
     * @example
     * // Create many Keys
     * const key = await prisma.key.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends KeyCreateManyArgs>(args?: SelectSubset<T, KeyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Keys and returns the data saved in the database.
     * @param {KeyCreateManyAndReturnArgs} args - Arguments to create many Keys.
     * @example
     * // Create many Keys
     * const key = await prisma.key.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Keys and only return the `id`
     * const keyWithIdOnly = await prisma.key.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends KeyCreateManyAndReturnArgs>(args?: SelectSubset<T, KeyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KeyPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Key.
     * @param {KeyDeleteArgs} args - Arguments to delete one Key.
     * @example
     * // Delete one Key
     * const Key = await prisma.key.delete({
     *   where: {
     *     // ... filter to delete one Key
     *   }
     * })
     * 
     */
    delete<T extends KeyDeleteArgs>(args: SelectSubset<T, KeyDeleteArgs<ExtArgs>>): Prisma__KeyClient<$Result.GetResult<Prisma.$KeyPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Key.
     * @param {KeyUpdateArgs} args - Arguments to update one Key.
     * @example
     * // Update one Key
     * const key = await prisma.key.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends KeyUpdateArgs>(args: SelectSubset<T, KeyUpdateArgs<ExtArgs>>): Prisma__KeyClient<$Result.GetResult<Prisma.$KeyPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Keys.
     * @param {KeyDeleteManyArgs} args - Arguments to filter Keys to delete.
     * @example
     * // Delete a few Keys
     * const { count } = await prisma.key.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends KeyDeleteManyArgs>(args?: SelectSubset<T, KeyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Keys.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Keys
     * const key = await prisma.key.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends KeyUpdateManyArgs>(args: SelectSubset<T, KeyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Keys and returns the data updated in the database.
     * @param {KeyUpdateManyAndReturnArgs} args - Arguments to update many Keys.
     * @example
     * // Update many Keys
     * const key = await prisma.key.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Keys and only return the `id`
     * const keyWithIdOnly = await prisma.key.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends KeyUpdateManyAndReturnArgs>(args: SelectSubset<T, KeyUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KeyPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Key.
     * @param {KeyUpsertArgs} args - Arguments to update or create a Key.
     * @example
     * // Update or create a Key
     * const key = await prisma.key.upsert({
     *   create: {
     *     // ... data to create a Key
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Key we want to update
     *   }
     * })
     */
    upsert<T extends KeyUpsertArgs>(args: SelectSubset<T, KeyUpsertArgs<ExtArgs>>): Prisma__KeyClient<$Result.GetResult<Prisma.$KeyPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Keys.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeyCountArgs} args - Arguments to filter Keys to count.
     * @example
     * // Count the number of Keys
     * const count = await prisma.key.count({
     *   where: {
     *     // ... the filter for the Keys we want to count
     *   }
     * })
    **/
    count<T extends KeyCountArgs>(
      args?: Subset<T, KeyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], KeyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Key.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends KeyAggregateArgs>(args: Subset<T, KeyAggregateArgs>): Prisma.PrismaPromise<GetKeyAggregateType<T>>

    /**
     * Group by Key.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends KeyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: KeyGroupByArgs['orderBy'] }
        : { orderBy?: KeyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, KeyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetKeyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Key model
   */
  readonly fields: KeyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Key.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__KeyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Key model
   */ 
  interface KeyFieldRefs {
    readonly id: FieldRef<"Key", 'Int'>
    readonly key: FieldRef<"Key", 'String'>
    readonly userId: FieldRef<"Key", 'Int'>
    readonly dateCreated: FieldRef<"Key", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Key findUnique
   */
  export type KeyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Key
     */
    select?: KeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Key
     */
    omit?: KeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeyInclude<ExtArgs> | null
    /**
     * Filter, which Key to fetch.
     */
    where: KeyWhereUniqueInput
  }

  /**
   * Key findUniqueOrThrow
   */
  export type KeyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Key
     */
    select?: KeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Key
     */
    omit?: KeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeyInclude<ExtArgs> | null
    /**
     * Filter, which Key to fetch.
     */
    where: KeyWhereUniqueInput
  }

  /**
   * Key findFirst
   */
  export type KeyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Key
     */
    select?: KeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Key
     */
    omit?: KeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeyInclude<ExtArgs> | null
    /**
     * Filter, which Key to fetch.
     */
    where?: KeyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Keys to fetch.
     */
    orderBy?: KeyOrderByWithRelationInput | KeyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Keys.
     */
    cursor?: KeyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Keys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Keys.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Keys.
     */
    distinct?: KeyScalarFieldEnum | KeyScalarFieldEnum[]
  }

  /**
   * Key findFirstOrThrow
   */
  export type KeyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Key
     */
    select?: KeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Key
     */
    omit?: KeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeyInclude<ExtArgs> | null
    /**
     * Filter, which Key to fetch.
     */
    where?: KeyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Keys to fetch.
     */
    orderBy?: KeyOrderByWithRelationInput | KeyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Keys.
     */
    cursor?: KeyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Keys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Keys.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Keys.
     */
    distinct?: KeyScalarFieldEnum | KeyScalarFieldEnum[]
  }

  /**
   * Key findMany
   */
  export type KeyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Key
     */
    select?: KeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Key
     */
    omit?: KeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeyInclude<ExtArgs> | null
    /**
     * Filter, which Keys to fetch.
     */
    where?: KeyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Keys to fetch.
     */
    orderBy?: KeyOrderByWithRelationInput | KeyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Keys.
     */
    cursor?: KeyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Keys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Keys.
     */
    skip?: number
    distinct?: KeyScalarFieldEnum | KeyScalarFieldEnum[]
  }

  /**
   * Key create
   */
  export type KeyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Key
     */
    select?: KeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Key
     */
    omit?: KeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeyInclude<ExtArgs> | null
    /**
     * The data needed to create a Key.
     */
    data: XOR<KeyCreateInput, KeyUncheckedCreateInput>
  }

  /**
   * Key createMany
   */
  export type KeyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Keys.
     */
    data: KeyCreateManyInput | KeyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Key createManyAndReturn
   */
  export type KeyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Key
     */
    select?: KeySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Key
     */
    omit?: KeyOmit<ExtArgs> | null
    /**
     * The data used to create many Keys.
     */
    data: KeyCreateManyInput | KeyCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeyIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Key update
   */
  export type KeyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Key
     */
    select?: KeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Key
     */
    omit?: KeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeyInclude<ExtArgs> | null
    /**
     * The data needed to update a Key.
     */
    data: XOR<KeyUpdateInput, KeyUncheckedUpdateInput>
    /**
     * Choose, which Key to update.
     */
    where: KeyWhereUniqueInput
  }

  /**
   * Key updateMany
   */
  export type KeyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Keys.
     */
    data: XOR<KeyUpdateManyMutationInput, KeyUncheckedUpdateManyInput>
    /**
     * Filter which Keys to update
     */
    where?: KeyWhereInput
    /**
     * Limit how many Keys to update.
     */
    limit?: number
  }

  /**
   * Key updateManyAndReturn
   */
  export type KeyUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Key
     */
    select?: KeySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Key
     */
    omit?: KeyOmit<ExtArgs> | null
    /**
     * The data used to update Keys.
     */
    data: XOR<KeyUpdateManyMutationInput, KeyUncheckedUpdateManyInput>
    /**
     * Filter which Keys to update
     */
    where?: KeyWhereInput
    /**
     * Limit how many Keys to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeyIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Key upsert
   */
  export type KeyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Key
     */
    select?: KeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Key
     */
    omit?: KeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeyInclude<ExtArgs> | null
    /**
     * The filter to search for the Key to update in case it exists.
     */
    where: KeyWhereUniqueInput
    /**
     * In case the Key found by the `where` argument doesn't exist, create a new Key with this data.
     */
    create: XOR<KeyCreateInput, KeyUncheckedCreateInput>
    /**
     * In case the Key was found with the provided `where` argument, update it with this data.
     */
    update: XOR<KeyUpdateInput, KeyUncheckedUpdateInput>
  }

  /**
   * Key delete
   */
  export type KeyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Key
     */
    select?: KeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Key
     */
    omit?: KeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeyInclude<ExtArgs> | null
    /**
     * Filter which Key to delete.
     */
    where: KeyWhereUniqueInput
  }

  /**
   * Key deleteMany
   */
  export type KeyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Keys to delete
     */
    where?: KeyWhereInput
    /**
     * Limit how many Keys to delete.
     */
    limit?: number
  }

  /**
   * Key without action
   */
  export type KeyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Key
     */
    select?: KeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Key
     */
    omit?: KeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeyInclude<ExtArgs> | null
  }


  /**
   * Model UserStatistics
   */

  export type AggregateUserStatistics = {
    _count: UserStatisticsCountAggregateOutputType | null
    _avg: UserStatisticsAvgAggregateOutputType | null
    _sum: UserStatisticsSumAggregateOutputType | null
    _min: UserStatisticsMinAggregateOutputType | null
    _max: UserStatisticsMaxAggregateOutputType | null
  }

  export type UserStatisticsAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type UserStatisticsSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type UserStatisticsMinAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type UserStatisticsMaxAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type UserStatisticsCountAggregateOutputType = {
    id: number
    userId: number
    _all: number
  }


  export type UserStatisticsAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type UserStatisticsSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type UserStatisticsMinAggregateInputType = {
    id?: true
    userId?: true
  }

  export type UserStatisticsMaxAggregateInputType = {
    id?: true
    userId?: true
  }

  export type UserStatisticsCountAggregateInputType = {
    id?: true
    userId?: true
    _all?: true
  }

  export type UserStatisticsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserStatistics to aggregate.
     */
    where?: UserStatisticsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserStatistics to fetch.
     */
    orderBy?: UserStatisticsOrderByWithRelationInput | UserStatisticsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserStatisticsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserStatistics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserStatistics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserStatistics
    **/
    _count?: true | UserStatisticsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserStatisticsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserStatisticsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserStatisticsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserStatisticsMaxAggregateInputType
  }

  export type GetUserStatisticsAggregateType<T extends UserStatisticsAggregateArgs> = {
        [P in keyof T & keyof AggregateUserStatistics]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserStatistics[P]>
      : GetScalarType<T[P], AggregateUserStatistics[P]>
  }




  export type UserStatisticsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserStatisticsWhereInput
    orderBy?: UserStatisticsOrderByWithAggregationInput | UserStatisticsOrderByWithAggregationInput[]
    by: UserStatisticsScalarFieldEnum[] | UserStatisticsScalarFieldEnum
    having?: UserStatisticsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserStatisticsCountAggregateInputType | true
    _avg?: UserStatisticsAvgAggregateInputType
    _sum?: UserStatisticsSumAggregateInputType
    _min?: UserStatisticsMinAggregateInputType
    _max?: UserStatisticsMaxAggregateInputType
  }

  export type UserStatisticsGroupByOutputType = {
    id: number
    userId: number
    _count: UserStatisticsCountAggregateOutputType | null
    _avg: UserStatisticsAvgAggregateOutputType | null
    _sum: UserStatisticsSumAggregateOutputType | null
    _min: UserStatisticsMinAggregateOutputType | null
    _max: UserStatisticsMaxAggregateOutputType | null
  }

  type GetUserStatisticsGroupByPayload<T extends UserStatisticsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserStatisticsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserStatisticsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserStatisticsGroupByOutputType[P]>
            : GetScalarType<T[P], UserStatisticsGroupByOutputType[P]>
        }
      >
    >


  export type UserStatisticsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userStatistics"]>

  export type UserStatisticsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userStatistics"]>

  export type UserStatisticsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userStatistics"]>

  export type UserStatisticsSelectScalar = {
    id?: boolean
    userId?: boolean
  }

  export type UserStatisticsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId", ExtArgs["result"]["userStatistics"]>
  export type UserStatisticsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserStatisticsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserStatisticsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserStatisticsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserStatistics"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
    }, ExtArgs["result"]["userStatistics"]>
    composites: {}
  }

  type UserStatisticsGetPayload<S extends boolean | null | undefined | UserStatisticsDefaultArgs> = $Result.GetResult<Prisma.$UserStatisticsPayload, S>

  type UserStatisticsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserStatisticsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserStatisticsCountAggregateInputType | true
    }

  export interface UserStatisticsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserStatistics'], meta: { name: 'UserStatistics' } }
    /**
     * Find zero or one UserStatistics that matches the filter.
     * @param {UserStatisticsFindUniqueArgs} args - Arguments to find a UserStatistics
     * @example
     * // Get one UserStatistics
     * const userStatistics = await prisma.userStatistics.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserStatisticsFindUniqueArgs>(args: SelectSubset<T, UserStatisticsFindUniqueArgs<ExtArgs>>): Prisma__UserStatisticsClient<$Result.GetResult<Prisma.$UserStatisticsPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one UserStatistics that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserStatisticsFindUniqueOrThrowArgs} args - Arguments to find a UserStatistics
     * @example
     * // Get one UserStatistics
     * const userStatistics = await prisma.userStatistics.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserStatisticsFindUniqueOrThrowArgs>(args: SelectSubset<T, UserStatisticsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserStatisticsClient<$Result.GetResult<Prisma.$UserStatisticsPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first UserStatistics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserStatisticsFindFirstArgs} args - Arguments to find a UserStatistics
     * @example
     * // Get one UserStatistics
     * const userStatistics = await prisma.userStatistics.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserStatisticsFindFirstArgs>(args?: SelectSubset<T, UserStatisticsFindFirstArgs<ExtArgs>>): Prisma__UserStatisticsClient<$Result.GetResult<Prisma.$UserStatisticsPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first UserStatistics that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserStatisticsFindFirstOrThrowArgs} args - Arguments to find a UserStatistics
     * @example
     * // Get one UserStatistics
     * const userStatistics = await prisma.userStatistics.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserStatisticsFindFirstOrThrowArgs>(args?: SelectSubset<T, UserStatisticsFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserStatisticsClient<$Result.GetResult<Prisma.$UserStatisticsPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more UserStatistics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserStatisticsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserStatistics
     * const userStatistics = await prisma.userStatistics.findMany()
     * 
     * // Get first 10 UserStatistics
     * const userStatistics = await prisma.userStatistics.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userStatisticsWithIdOnly = await prisma.userStatistics.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserStatisticsFindManyArgs>(args?: SelectSubset<T, UserStatisticsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserStatisticsPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a UserStatistics.
     * @param {UserStatisticsCreateArgs} args - Arguments to create a UserStatistics.
     * @example
     * // Create one UserStatistics
     * const UserStatistics = await prisma.userStatistics.create({
     *   data: {
     *     // ... data to create a UserStatistics
     *   }
     * })
     * 
     */
    create<T extends UserStatisticsCreateArgs>(args: SelectSubset<T, UserStatisticsCreateArgs<ExtArgs>>): Prisma__UserStatisticsClient<$Result.GetResult<Prisma.$UserStatisticsPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many UserStatistics.
     * @param {UserStatisticsCreateManyArgs} args - Arguments to create many UserStatistics.
     * @example
     * // Create many UserStatistics
     * const userStatistics = await prisma.userStatistics.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserStatisticsCreateManyArgs>(args?: SelectSubset<T, UserStatisticsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserStatistics and returns the data saved in the database.
     * @param {UserStatisticsCreateManyAndReturnArgs} args - Arguments to create many UserStatistics.
     * @example
     * // Create many UserStatistics
     * const userStatistics = await prisma.userStatistics.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserStatistics and only return the `id`
     * const userStatisticsWithIdOnly = await prisma.userStatistics.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserStatisticsCreateManyAndReturnArgs>(args?: SelectSubset<T, UserStatisticsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserStatisticsPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a UserStatistics.
     * @param {UserStatisticsDeleteArgs} args - Arguments to delete one UserStatistics.
     * @example
     * // Delete one UserStatistics
     * const UserStatistics = await prisma.userStatistics.delete({
     *   where: {
     *     // ... filter to delete one UserStatistics
     *   }
     * })
     * 
     */
    delete<T extends UserStatisticsDeleteArgs>(args: SelectSubset<T, UserStatisticsDeleteArgs<ExtArgs>>): Prisma__UserStatisticsClient<$Result.GetResult<Prisma.$UserStatisticsPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one UserStatistics.
     * @param {UserStatisticsUpdateArgs} args - Arguments to update one UserStatistics.
     * @example
     * // Update one UserStatistics
     * const userStatistics = await prisma.userStatistics.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserStatisticsUpdateArgs>(args: SelectSubset<T, UserStatisticsUpdateArgs<ExtArgs>>): Prisma__UserStatisticsClient<$Result.GetResult<Prisma.$UserStatisticsPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more UserStatistics.
     * @param {UserStatisticsDeleteManyArgs} args - Arguments to filter UserStatistics to delete.
     * @example
     * // Delete a few UserStatistics
     * const { count } = await prisma.userStatistics.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserStatisticsDeleteManyArgs>(args?: SelectSubset<T, UserStatisticsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserStatistics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserStatisticsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserStatistics
     * const userStatistics = await prisma.userStatistics.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserStatisticsUpdateManyArgs>(args: SelectSubset<T, UserStatisticsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserStatistics and returns the data updated in the database.
     * @param {UserStatisticsUpdateManyAndReturnArgs} args - Arguments to update many UserStatistics.
     * @example
     * // Update many UserStatistics
     * const userStatistics = await prisma.userStatistics.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserStatistics and only return the `id`
     * const userStatisticsWithIdOnly = await prisma.userStatistics.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserStatisticsUpdateManyAndReturnArgs>(args: SelectSubset<T, UserStatisticsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserStatisticsPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one UserStatistics.
     * @param {UserStatisticsUpsertArgs} args - Arguments to update or create a UserStatistics.
     * @example
     * // Update or create a UserStatistics
     * const userStatistics = await prisma.userStatistics.upsert({
     *   create: {
     *     // ... data to create a UserStatistics
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserStatistics we want to update
     *   }
     * })
     */
    upsert<T extends UserStatisticsUpsertArgs>(args: SelectSubset<T, UserStatisticsUpsertArgs<ExtArgs>>): Prisma__UserStatisticsClient<$Result.GetResult<Prisma.$UserStatisticsPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of UserStatistics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserStatisticsCountArgs} args - Arguments to filter UserStatistics to count.
     * @example
     * // Count the number of UserStatistics
     * const count = await prisma.userStatistics.count({
     *   where: {
     *     // ... the filter for the UserStatistics we want to count
     *   }
     * })
    **/
    count<T extends UserStatisticsCountArgs>(
      args?: Subset<T, UserStatisticsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserStatisticsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserStatistics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserStatisticsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserStatisticsAggregateArgs>(args: Subset<T, UserStatisticsAggregateArgs>): Prisma.PrismaPromise<GetUserStatisticsAggregateType<T>>

    /**
     * Group by UserStatistics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserStatisticsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserStatisticsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserStatisticsGroupByArgs['orderBy'] }
        : { orderBy?: UserStatisticsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserStatisticsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserStatisticsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserStatistics model
   */
  readonly fields: UserStatisticsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserStatistics.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserStatisticsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserStatistics model
   */ 
  interface UserStatisticsFieldRefs {
    readonly id: FieldRef<"UserStatistics", 'Int'>
    readonly userId: FieldRef<"UserStatistics", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * UserStatistics findUnique
   */
  export type UserStatisticsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStatistics
     */
    select?: UserStatisticsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserStatistics
     */
    omit?: UserStatisticsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStatisticsInclude<ExtArgs> | null
    /**
     * Filter, which UserStatistics to fetch.
     */
    where: UserStatisticsWhereUniqueInput
  }

  /**
   * UserStatistics findUniqueOrThrow
   */
  export type UserStatisticsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStatistics
     */
    select?: UserStatisticsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserStatistics
     */
    omit?: UserStatisticsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStatisticsInclude<ExtArgs> | null
    /**
     * Filter, which UserStatistics to fetch.
     */
    where: UserStatisticsWhereUniqueInput
  }

  /**
   * UserStatistics findFirst
   */
  export type UserStatisticsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStatistics
     */
    select?: UserStatisticsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserStatistics
     */
    omit?: UserStatisticsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStatisticsInclude<ExtArgs> | null
    /**
     * Filter, which UserStatistics to fetch.
     */
    where?: UserStatisticsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserStatistics to fetch.
     */
    orderBy?: UserStatisticsOrderByWithRelationInput | UserStatisticsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserStatistics.
     */
    cursor?: UserStatisticsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserStatistics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserStatistics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserStatistics.
     */
    distinct?: UserStatisticsScalarFieldEnum | UserStatisticsScalarFieldEnum[]
  }

  /**
   * UserStatistics findFirstOrThrow
   */
  export type UserStatisticsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStatistics
     */
    select?: UserStatisticsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserStatistics
     */
    omit?: UserStatisticsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStatisticsInclude<ExtArgs> | null
    /**
     * Filter, which UserStatistics to fetch.
     */
    where?: UserStatisticsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserStatistics to fetch.
     */
    orderBy?: UserStatisticsOrderByWithRelationInput | UserStatisticsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserStatistics.
     */
    cursor?: UserStatisticsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserStatistics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserStatistics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserStatistics.
     */
    distinct?: UserStatisticsScalarFieldEnum | UserStatisticsScalarFieldEnum[]
  }

  /**
   * UserStatistics findMany
   */
  export type UserStatisticsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStatistics
     */
    select?: UserStatisticsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserStatistics
     */
    omit?: UserStatisticsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStatisticsInclude<ExtArgs> | null
    /**
     * Filter, which UserStatistics to fetch.
     */
    where?: UserStatisticsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserStatistics to fetch.
     */
    orderBy?: UserStatisticsOrderByWithRelationInput | UserStatisticsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserStatistics.
     */
    cursor?: UserStatisticsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserStatistics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserStatistics.
     */
    skip?: number
    distinct?: UserStatisticsScalarFieldEnum | UserStatisticsScalarFieldEnum[]
  }

  /**
   * UserStatistics create
   */
  export type UserStatisticsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStatistics
     */
    select?: UserStatisticsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserStatistics
     */
    omit?: UserStatisticsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStatisticsInclude<ExtArgs> | null
    /**
     * The data needed to create a UserStatistics.
     */
    data: XOR<UserStatisticsCreateInput, UserStatisticsUncheckedCreateInput>
  }

  /**
   * UserStatistics createMany
   */
  export type UserStatisticsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserStatistics.
     */
    data: UserStatisticsCreateManyInput | UserStatisticsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserStatistics createManyAndReturn
   */
  export type UserStatisticsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStatistics
     */
    select?: UserStatisticsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserStatistics
     */
    omit?: UserStatisticsOmit<ExtArgs> | null
    /**
     * The data used to create many UserStatistics.
     */
    data: UserStatisticsCreateManyInput | UserStatisticsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStatisticsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserStatistics update
   */
  export type UserStatisticsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStatistics
     */
    select?: UserStatisticsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserStatistics
     */
    omit?: UserStatisticsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStatisticsInclude<ExtArgs> | null
    /**
     * The data needed to update a UserStatistics.
     */
    data: XOR<UserStatisticsUpdateInput, UserStatisticsUncheckedUpdateInput>
    /**
     * Choose, which UserStatistics to update.
     */
    where: UserStatisticsWhereUniqueInput
  }

  /**
   * UserStatistics updateMany
   */
  export type UserStatisticsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserStatistics.
     */
    data: XOR<UserStatisticsUpdateManyMutationInput, UserStatisticsUncheckedUpdateManyInput>
    /**
     * Filter which UserStatistics to update
     */
    where?: UserStatisticsWhereInput
    /**
     * Limit how many UserStatistics to update.
     */
    limit?: number
  }

  /**
   * UserStatistics updateManyAndReturn
   */
  export type UserStatisticsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStatistics
     */
    select?: UserStatisticsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserStatistics
     */
    omit?: UserStatisticsOmit<ExtArgs> | null
    /**
     * The data used to update UserStatistics.
     */
    data: XOR<UserStatisticsUpdateManyMutationInput, UserStatisticsUncheckedUpdateManyInput>
    /**
     * Filter which UserStatistics to update
     */
    where?: UserStatisticsWhereInput
    /**
     * Limit how many UserStatistics to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStatisticsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserStatistics upsert
   */
  export type UserStatisticsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStatistics
     */
    select?: UserStatisticsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserStatistics
     */
    omit?: UserStatisticsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStatisticsInclude<ExtArgs> | null
    /**
     * The filter to search for the UserStatistics to update in case it exists.
     */
    where: UserStatisticsWhereUniqueInput
    /**
     * In case the UserStatistics found by the `where` argument doesn't exist, create a new UserStatistics with this data.
     */
    create: XOR<UserStatisticsCreateInput, UserStatisticsUncheckedCreateInput>
    /**
     * In case the UserStatistics was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserStatisticsUpdateInput, UserStatisticsUncheckedUpdateInput>
  }

  /**
   * UserStatistics delete
   */
  export type UserStatisticsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStatistics
     */
    select?: UserStatisticsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserStatistics
     */
    omit?: UserStatisticsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStatisticsInclude<ExtArgs> | null
    /**
     * Filter which UserStatistics to delete.
     */
    where: UserStatisticsWhereUniqueInput
  }

  /**
   * UserStatistics deleteMany
   */
  export type UserStatisticsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserStatistics to delete
     */
    where?: UserStatisticsWhereInput
    /**
     * Limit how many UserStatistics to delete.
     */
    limit?: number
  }

  /**
   * UserStatistics without action
   */
  export type UserStatisticsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStatistics
     */
    select?: UserStatisticsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserStatistics
     */
    omit?: UserStatisticsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStatisticsInclude<ExtArgs> | null
  }


  /**
   * Model GlobalStatistics
   */

  export type AggregateGlobalStatistics = {
    _count: GlobalStatisticsCountAggregateOutputType | null
    _avg: GlobalStatisticsAvgAggregateOutputType | null
    _sum: GlobalStatisticsSumAggregateOutputType | null
    _min: GlobalStatisticsMinAggregateOutputType | null
    _max: GlobalStatisticsMaxAggregateOutputType | null
  }

  export type GlobalStatisticsAvgAggregateOutputType = {
    id: number | null
    caesarEncryptions: number | null
    caesarDecryptions: number | null
    substitutionEncryptions: number | null
    substitutionDecryptions: number | null
    OTPEncryptions: number | null
    OTPDecryptions: number | null
    VigenereEncryptions: number | null
    VigenereDecryptions: number | null
    A51Encryptions: number | null
    A51Decryptions: number | null
    RC4Encryptions: number | null
    RC4Decryptions: number | null
    DESEncryptions: number | null
    DESDecryptions: number | null
    AESEncryptions: number | null
    AESDecryptions: number | null
    TEAEncryptions: number | null
    TEADecryptions: number | null
  }

  export type GlobalStatisticsSumAggregateOutputType = {
    id: number | null
    caesarEncryptions: number | null
    caesarDecryptions: number | null
    substitutionEncryptions: number | null
    substitutionDecryptions: number | null
    OTPEncryptions: number | null
    OTPDecryptions: number | null
    VigenereEncryptions: number | null
    VigenereDecryptions: number | null
    A51Encryptions: number | null
    A51Decryptions: number | null
    RC4Encryptions: number | null
    RC4Decryptions: number | null
    DESEncryptions: number | null
    DESDecryptions: number | null
    AESEncryptions: number | null
    AESDecryptions: number | null
    TEAEncryptions: number | null
    TEADecryptions: number | null
  }

  export type GlobalStatisticsMinAggregateOutputType = {
    id: number | null
    caesarEncryptions: number | null
    caesarDecryptions: number | null
    substitutionEncryptions: number | null
    substitutionDecryptions: number | null
    OTPEncryptions: number | null
    OTPDecryptions: number | null
    VigenereEncryptions: number | null
    VigenereDecryptions: number | null
    A51Encryptions: number | null
    A51Decryptions: number | null
    RC4Encryptions: number | null
    RC4Decryptions: number | null
    DESEncryptions: number | null
    DESDecryptions: number | null
    AESEncryptions: number | null
    AESDecryptions: number | null
    TEAEncryptions: number | null
    TEADecryptions: number | null
  }

  export type GlobalStatisticsMaxAggregateOutputType = {
    id: number | null
    caesarEncryptions: number | null
    caesarDecryptions: number | null
    substitutionEncryptions: number | null
    substitutionDecryptions: number | null
    OTPEncryptions: number | null
    OTPDecryptions: number | null
    VigenereEncryptions: number | null
    VigenereDecryptions: number | null
    A51Encryptions: number | null
    A51Decryptions: number | null
    RC4Encryptions: number | null
    RC4Decryptions: number | null
    DESEncryptions: number | null
    DESDecryptions: number | null
    AESEncryptions: number | null
    AESDecryptions: number | null
    TEAEncryptions: number | null
    TEADecryptions: number | null
  }

  export type GlobalStatisticsCountAggregateOutputType = {
    id: number
    caesarEncryptions: number
    caesarDecryptions: number
    substitutionEncryptions: number
    substitutionDecryptions: number
    OTPEncryptions: number
    OTPDecryptions: number
    VigenereEncryptions: number
    VigenereDecryptions: number
    A51Encryptions: number
    A51Decryptions: number
    RC4Encryptions: number
    RC4Decryptions: number
    DESEncryptions: number
    DESDecryptions: number
    AESEncryptions: number
    AESDecryptions: number
    TEAEncryptions: number
    TEADecryptions: number
    _all: number
  }


  export type GlobalStatisticsAvgAggregateInputType = {
    id?: true
    caesarEncryptions?: true
    caesarDecryptions?: true
    substitutionEncryptions?: true
    substitutionDecryptions?: true
    OTPEncryptions?: true
    OTPDecryptions?: true
    VigenereEncryptions?: true
    VigenereDecryptions?: true
    A51Encryptions?: true
    A51Decryptions?: true
    RC4Encryptions?: true
    RC4Decryptions?: true
    DESEncryptions?: true
    DESDecryptions?: true
    AESEncryptions?: true
    AESDecryptions?: true
    TEAEncryptions?: true
    TEADecryptions?: true
  }

  export type GlobalStatisticsSumAggregateInputType = {
    id?: true
    caesarEncryptions?: true
    caesarDecryptions?: true
    substitutionEncryptions?: true
    substitutionDecryptions?: true
    OTPEncryptions?: true
    OTPDecryptions?: true
    VigenereEncryptions?: true
    VigenereDecryptions?: true
    A51Encryptions?: true
    A51Decryptions?: true
    RC4Encryptions?: true
    RC4Decryptions?: true
    DESEncryptions?: true
    DESDecryptions?: true
    AESEncryptions?: true
    AESDecryptions?: true
    TEAEncryptions?: true
    TEADecryptions?: true
  }

  export type GlobalStatisticsMinAggregateInputType = {
    id?: true
    caesarEncryptions?: true
    caesarDecryptions?: true
    substitutionEncryptions?: true
    substitutionDecryptions?: true
    OTPEncryptions?: true
    OTPDecryptions?: true
    VigenereEncryptions?: true
    VigenereDecryptions?: true
    A51Encryptions?: true
    A51Decryptions?: true
    RC4Encryptions?: true
    RC4Decryptions?: true
    DESEncryptions?: true
    DESDecryptions?: true
    AESEncryptions?: true
    AESDecryptions?: true
    TEAEncryptions?: true
    TEADecryptions?: true
  }

  export type GlobalStatisticsMaxAggregateInputType = {
    id?: true
    caesarEncryptions?: true
    caesarDecryptions?: true
    substitutionEncryptions?: true
    substitutionDecryptions?: true
    OTPEncryptions?: true
    OTPDecryptions?: true
    VigenereEncryptions?: true
    VigenereDecryptions?: true
    A51Encryptions?: true
    A51Decryptions?: true
    RC4Encryptions?: true
    RC4Decryptions?: true
    DESEncryptions?: true
    DESDecryptions?: true
    AESEncryptions?: true
    AESDecryptions?: true
    TEAEncryptions?: true
    TEADecryptions?: true
  }

  export type GlobalStatisticsCountAggregateInputType = {
    id?: true
    caesarEncryptions?: true
    caesarDecryptions?: true
    substitutionEncryptions?: true
    substitutionDecryptions?: true
    OTPEncryptions?: true
    OTPDecryptions?: true
    VigenereEncryptions?: true
    VigenereDecryptions?: true
    A51Encryptions?: true
    A51Decryptions?: true
    RC4Encryptions?: true
    RC4Decryptions?: true
    DESEncryptions?: true
    DESDecryptions?: true
    AESEncryptions?: true
    AESDecryptions?: true
    TEAEncryptions?: true
    TEADecryptions?: true
    _all?: true
  }

  export type GlobalStatisticsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GlobalStatistics to aggregate.
     */
    where?: GlobalStatisticsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GlobalStatistics to fetch.
     */
    orderBy?: GlobalStatisticsOrderByWithRelationInput | GlobalStatisticsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GlobalStatisticsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GlobalStatistics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GlobalStatistics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GlobalStatistics
    **/
    _count?: true | GlobalStatisticsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GlobalStatisticsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GlobalStatisticsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GlobalStatisticsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GlobalStatisticsMaxAggregateInputType
  }

  export type GetGlobalStatisticsAggregateType<T extends GlobalStatisticsAggregateArgs> = {
        [P in keyof T & keyof AggregateGlobalStatistics]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGlobalStatistics[P]>
      : GetScalarType<T[P], AggregateGlobalStatistics[P]>
  }




  export type GlobalStatisticsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GlobalStatisticsWhereInput
    orderBy?: GlobalStatisticsOrderByWithAggregationInput | GlobalStatisticsOrderByWithAggregationInput[]
    by: GlobalStatisticsScalarFieldEnum[] | GlobalStatisticsScalarFieldEnum
    having?: GlobalStatisticsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GlobalStatisticsCountAggregateInputType | true
    _avg?: GlobalStatisticsAvgAggregateInputType
    _sum?: GlobalStatisticsSumAggregateInputType
    _min?: GlobalStatisticsMinAggregateInputType
    _max?: GlobalStatisticsMaxAggregateInputType
  }

  export type GlobalStatisticsGroupByOutputType = {
    id: number
    caesarEncryptions: number
    caesarDecryptions: number
    substitutionEncryptions: number
    substitutionDecryptions: number
    OTPEncryptions: number
    OTPDecryptions: number
    VigenereEncryptions: number
    VigenereDecryptions: number
    A51Encryptions: number
    A51Decryptions: number
    RC4Encryptions: number
    RC4Decryptions: number
    DESEncryptions: number
    DESDecryptions: number
    AESEncryptions: number
    AESDecryptions: number
    TEAEncryptions: number
    TEADecryptions: number
    _count: GlobalStatisticsCountAggregateOutputType | null
    _avg: GlobalStatisticsAvgAggregateOutputType | null
    _sum: GlobalStatisticsSumAggregateOutputType | null
    _min: GlobalStatisticsMinAggregateOutputType | null
    _max: GlobalStatisticsMaxAggregateOutputType | null
  }

  type GetGlobalStatisticsGroupByPayload<T extends GlobalStatisticsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GlobalStatisticsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GlobalStatisticsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GlobalStatisticsGroupByOutputType[P]>
            : GetScalarType<T[P], GlobalStatisticsGroupByOutputType[P]>
        }
      >
    >


  export type GlobalStatisticsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    caesarEncryptions?: boolean
    caesarDecryptions?: boolean
    substitutionEncryptions?: boolean
    substitutionDecryptions?: boolean
    OTPEncryptions?: boolean
    OTPDecryptions?: boolean
    VigenereEncryptions?: boolean
    VigenereDecryptions?: boolean
    A51Encryptions?: boolean
    A51Decryptions?: boolean
    RC4Encryptions?: boolean
    RC4Decryptions?: boolean
    DESEncryptions?: boolean
    DESDecryptions?: boolean
    AESEncryptions?: boolean
    AESDecryptions?: boolean
    TEAEncryptions?: boolean
    TEADecryptions?: boolean
  }, ExtArgs["result"]["globalStatistics"]>

  export type GlobalStatisticsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    caesarEncryptions?: boolean
    caesarDecryptions?: boolean
    substitutionEncryptions?: boolean
    substitutionDecryptions?: boolean
    OTPEncryptions?: boolean
    OTPDecryptions?: boolean
    VigenereEncryptions?: boolean
    VigenereDecryptions?: boolean
    A51Encryptions?: boolean
    A51Decryptions?: boolean
    RC4Encryptions?: boolean
    RC4Decryptions?: boolean
    DESEncryptions?: boolean
    DESDecryptions?: boolean
    AESEncryptions?: boolean
    AESDecryptions?: boolean
    TEAEncryptions?: boolean
    TEADecryptions?: boolean
  }, ExtArgs["result"]["globalStatistics"]>

  export type GlobalStatisticsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    caesarEncryptions?: boolean
    caesarDecryptions?: boolean
    substitutionEncryptions?: boolean
    substitutionDecryptions?: boolean
    OTPEncryptions?: boolean
    OTPDecryptions?: boolean
    VigenereEncryptions?: boolean
    VigenereDecryptions?: boolean
    A51Encryptions?: boolean
    A51Decryptions?: boolean
    RC4Encryptions?: boolean
    RC4Decryptions?: boolean
    DESEncryptions?: boolean
    DESDecryptions?: boolean
    AESEncryptions?: boolean
    AESDecryptions?: boolean
    TEAEncryptions?: boolean
    TEADecryptions?: boolean
  }, ExtArgs["result"]["globalStatistics"]>

  export type GlobalStatisticsSelectScalar = {
    id?: boolean
    caesarEncryptions?: boolean
    caesarDecryptions?: boolean
    substitutionEncryptions?: boolean
    substitutionDecryptions?: boolean
    OTPEncryptions?: boolean
    OTPDecryptions?: boolean
    VigenereEncryptions?: boolean
    VigenereDecryptions?: boolean
    A51Encryptions?: boolean
    A51Decryptions?: boolean
    RC4Encryptions?: boolean
    RC4Decryptions?: boolean
    DESEncryptions?: boolean
    DESDecryptions?: boolean
    AESEncryptions?: boolean
    AESDecryptions?: boolean
    TEAEncryptions?: boolean
    TEADecryptions?: boolean
  }

  export type GlobalStatisticsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "caesarEncryptions" | "caesarDecryptions" | "substitutionEncryptions" | "substitutionDecryptions" | "OTPEncryptions" | "OTPDecryptions" | "VigenereEncryptions" | "VigenereDecryptions" | "A51Encryptions" | "A51Decryptions" | "RC4Encryptions" | "RC4Decryptions" | "DESEncryptions" | "DESDecryptions" | "AESEncryptions" | "AESDecryptions" | "TEAEncryptions" | "TEADecryptions", ExtArgs["result"]["globalStatistics"]>

  export type $GlobalStatisticsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GlobalStatistics"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      caesarEncryptions: number
      caesarDecryptions: number
      substitutionEncryptions: number
      substitutionDecryptions: number
      OTPEncryptions: number
      OTPDecryptions: number
      VigenereEncryptions: number
      VigenereDecryptions: number
      A51Encryptions: number
      A51Decryptions: number
      RC4Encryptions: number
      RC4Decryptions: number
      DESEncryptions: number
      DESDecryptions: number
      AESEncryptions: number
      AESDecryptions: number
      TEAEncryptions: number
      TEADecryptions: number
    }, ExtArgs["result"]["globalStatistics"]>
    composites: {}
  }

  type GlobalStatisticsGetPayload<S extends boolean | null | undefined | GlobalStatisticsDefaultArgs> = $Result.GetResult<Prisma.$GlobalStatisticsPayload, S>

  type GlobalStatisticsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GlobalStatisticsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GlobalStatisticsCountAggregateInputType | true
    }

  export interface GlobalStatisticsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GlobalStatistics'], meta: { name: 'GlobalStatistics' } }
    /**
     * Find zero or one GlobalStatistics that matches the filter.
     * @param {GlobalStatisticsFindUniqueArgs} args - Arguments to find a GlobalStatistics
     * @example
     * // Get one GlobalStatistics
     * const globalStatistics = await prisma.globalStatistics.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GlobalStatisticsFindUniqueArgs>(args: SelectSubset<T, GlobalStatisticsFindUniqueArgs<ExtArgs>>): Prisma__GlobalStatisticsClient<$Result.GetResult<Prisma.$GlobalStatisticsPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one GlobalStatistics that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GlobalStatisticsFindUniqueOrThrowArgs} args - Arguments to find a GlobalStatistics
     * @example
     * // Get one GlobalStatistics
     * const globalStatistics = await prisma.globalStatistics.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GlobalStatisticsFindUniqueOrThrowArgs>(args: SelectSubset<T, GlobalStatisticsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GlobalStatisticsClient<$Result.GetResult<Prisma.$GlobalStatisticsPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first GlobalStatistics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GlobalStatisticsFindFirstArgs} args - Arguments to find a GlobalStatistics
     * @example
     * // Get one GlobalStatistics
     * const globalStatistics = await prisma.globalStatistics.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GlobalStatisticsFindFirstArgs>(args?: SelectSubset<T, GlobalStatisticsFindFirstArgs<ExtArgs>>): Prisma__GlobalStatisticsClient<$Result.GetResult<Prisma.$GlobalStatisticsPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first GlobalStatistics that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GlobalStatisticsFindFirstOrThrowArgs} args - Arguments to find a GlobalStatistics
     * @example
     * // Get one GlobalStatistics
     * const globalStatistics = await prisma.globalStatistics.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GlobalStatisticsFindFirstOrThrowArgs>(args?: SelectSubset<T, GlobalStatisticsFindFirstOrThrowArgs<ExtArgs>>): Prisma__GlobalStatisticsClient<$Result.GetResult<Prisma.$GlobalStatisticsPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more GlobalStatistics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GlobalStatisticsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GlobalStatistics
     * const globalStatistics = await prisma.globalStatistics.findMany()
     * 
     * // Get first 10 GlobalStatistics
     * const globalStatistics = await prisma.globalStatistics.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const globalStatisticsWithIdOnly = await prisma.globalStatistics.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GlobalStatisticsFindManyArgs>(args?: SelectSubset<T, GlobalStatisticsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GlobalStatisticsPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a GlobalStatistics.
     * @param {GlobalStatisticsCreateArgs} args - Arguments to create a GlobalStatistics.
     * @example
     * // Create one GlobalStatistics
     * const GlobalStatistics = await prisma.globalStatistics.create({
     *   data: {
     *     // ... data to create a GlobalStatistics
     *   }
     * })
     * 
     */
    create<T extends GlobalStatisticsCreateArgs>(args: SelectSubset<T, GlobalStatisticsCreateArgs<ExtArgs>>): Prisma__GlobalStatisticsClient<$Result.GetResult<Prisma.$GlobalStatisticsPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many GlobalStatistics.
     * @param {GlobalStatisticsCreateManyArgs} args - Arguments to create many GlobalStatistics.
     * @example
     * // Create many GlobalStatistics
     * const globalStatistics = await prisma.globalStatistics.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GlobalStatisticsCreateManyArgs>(args?: SelectSubset<T, GlobalStatisticsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many GlobalStatistics and returns the data saved in the database.
     * @param {GlobalStatisticsCreateManyAndReturnArgs} args - Arguments to create many GlobalStatistics.
     * @example
     * // Create many GlobalStatistics
     * const globalStatistics = await prisma.globalStatistics.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many GlobalStatistics and only return the `id`
     * const globalStatisticsWithIdOnly = await prisma.globalStatistics.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GlobalStatisticsCreateManyAndReturnArgs>(args?: SelectSubset<T, GlobalStatisticsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GlobalStatisticsPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a GlobalStatistics.
     * @param {GlobalStatisticsDeleteArgs} args - Arguments to delete one GlobalStatistics.
     * @example
     * // Delete one GlobalStatistics
     * const GlobalStatistics = await prisma.globalStatistics.delete({
     *   where: {
     *     // ... filter to delete one GlobalStatistics
     *   }
     * })
     * 
     */
    delete<T extends GlobalStatisticsDeleteArgs>(args: SelectSubset<T, GlobalStatisticsDeleteArgs<ExtArgs>>): Prisma__GlobalStatisticsClient<$Result.GetResult<Prisma.$GlobalStatisticsPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one GlobalStatistics.
     * @param {GlobalStatisticsUpdateArgs} args - Arguments to update one GlobalStatistics.
     * @example
     * // Update one GlobalStatistics
     * const globalStatistics = await prisma.globalStatistics.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GlobalStatisticsUpdateArgs>(args: SelectSubset<T, GlobalStatisticsUpdateArgs<ExtArgs>>): Prisma__GlobalStatisticsClient<$Result.GetResult<Prisma.$GlobalStatisticsPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more GlobalStatistics.
     * @param {GlobalStatisticsDeleteManyArgs} args - Arguments to filter GlobalStatistics to delete.
     * @example
     * // Delete a few GlobalStatistics
     * const { count } = await prisma.globalStatistics.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GlobalStatisticsDeleteManyArgs>(args?: SelectSubset<T, GlobalStatisticsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GlobalStatistics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GlobalStatisticsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GlobalStatistics
     * const globalStatistics = await prisma.globalStatistics.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GlobalStatisticsUpdateManyArgs>(args: SelectSubset<T, GlobalStatisticsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GlobalStatistics and returns the data updated in the database.
     * @param {GlobalStatisticsUpdateManyAndReturnArgs} args - Arguments to update many GlobalStatistics.
     * @example
     * // Update many GlobalStatistics
     * const globalStatistics = await prisma.globalStatistics.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more GlobalStatistics and only return the `id`
     * const globalStatisticsWithIdOnly = await prisma.globalStatistics.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends GlobalStatisticsUpdateManyAndReturnArgs>(args: SelectSubset<T, GlobalStatisticsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GlobalStatisticsPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one GlobalStatistics.
     * @param {GlobalStatisticsUpsertArgs} args - Arguments to update or create a GlobalStatistics.
     * @example
     * // Update or create a GlobalStatistics
     * const globalStatistics = await prisma.globalStatistics.upsert({
     *   create: {
     *     // ... data to create a GlobalStatistics
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GlobalStatistics we want to update
     *   }
     * })
     */
    upsert<T extends GlobalStatisticsUpsertArgs>(args: SelectSubset<T, GlobalStatisticsUpsertArgs<ExtArgs>>): Prisma__GlobalStatisticsClient<$Result.GetResult<Prisma.$GlobalStatisticsPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of GlobalStatistics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GlobalStatisticsCountArgs} args - Arguments to filter GlobalStatistics to count.
     * @example
     * // Count the number of GlobalStatistics
     * const count = await prisma.globalStatistics.count({
     *   where: {
     *     // ... the filter for the GlobalStatistics we want to count
     *   }
     * })
    **/
    count<T extends GlobalStatisticsCountArgs>(
      args?: Subset<T, GlobalStatisticsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GlobalStatisticsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GlobalStatistics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GlobalStatisticsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GlobalStatisticsAggregateArgs>(args: Subset<T, GlobalStatisticsAggregateArgs>): Prisma.PrismaPromise<GetGlobalStatisticsAggregateType<T>>

    /**
     * Group by GlobalStatistics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GlobalStatisticsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GlobalStatisticsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GlobalStatisticsGroupByArgs['orderBy'] }
        : { orderBy?: GlobalStatisticsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GlobalStatisticsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGlobalStatisticsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GlobalStatistics model
   */
  readonly fields: GlobalStatisticsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GlobalStatistics.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GlobalStatisticsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GlobalStatistics model
   */ 
  interface GlobalStatisticsFieldRefs {
    readonly id: FieldRef<"GlobalStatistics", 'Int'>
    readonly caesarEncryptions: FieldRef<"GlobalStatistics", 'Int'>
    readonly caesarDecryptions: FieldRef<"GlobalStatistics", 'Int'>
    readonly substitutionEncryptions: FieldRef<"GlobalStatistics", 'Int'>
    readonly substitutionDecryptions: FieldRef<"GlobalStatistics", 'Int'>
    readonly OTPEncryptions: FieldRef<"GlobalStatistics", 'Int'>
    readonly OTPDecryptions: FieldRef<"GlobalStatistics", 'Int'>
    readonly VigenereEncryptions: FieldRef<"GlobalStatistics", 'Int'>
    readonly VigenereDecryptions: FieldRef<"GlobalStatistics", 'Int'>
    readonly A51Encryptions: FieldRef<"GlobalStatistics", 'Int'>
    readonly A51Decryptions: FieldRef<"GlobalStatistics", 'Int'>
    readonly RC4Encryptions: FieldRef<"GlobalStatistics", 'Int'>
    readonly RC4Decryptions: FieldRef<"GlobalStatistics", 'Int'>
    readonly DESEncryptions: FieldRef<"GlobalStatistics", 'Int'>
    readonly DESDecryptions: FieldRef<"GlobalStatistics", 'Int'>
    readonly AESEncryptions: FieldRef<"GlobalStatistics", 'Int'>
    readonly AESDecryptions: FieldRef<"GlobalStatistics", 'Int'>
    readonly TEAEncryptions: FieldRef<"GlobalStatistics", 'Int'>
    readonly TEADecryptions: FieldRef<"GlobalStatistics", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * GlobalStatistics findUnique
   */
  export type GlobalStatisticsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlobalStatistics
     */
    select?: GlobalStatisticsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GlobalStatistics
     */
    omit?: GlobalStatisticsOmit<ExtArgs> | null
    /**
     * Filter, which GlobalStatistics to fetch.
     */
    where: GlobalStatisticsWhereUniqueInput
  }

  /**
   * GlobalStatistics findUniqueOrThrow
   */
  export type GlobalStatisticsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlobalStatistics
     */
    select?: GlobalStatisticsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GlobalStatistics
     */
    omit?: GlobalStatisticsOmit<ExtArgs> | null
    /**
     * Filter, which GlobalStatistics to fetch.
     */
    where: GlobalStatisticsWhereUniqueInput
  }

  /**
   * GlobalStatistics findFirst
   */
  export type GlobalStatisticsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlobalStatistics
     */
    select?: GlobalStatisticsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GlobalStatistics
     */
    omit?: GlobalStatisticsOmit<ExtArgs> | null
    /**
     * Filter, which GlobalStatistics to fetch.
     */
    where?: GlobalStatisticsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GlobalStatistics to fetch.
     */
    orderBy?: GlobalStatisticsOrderByWithRelationInput | GlobalStatisticsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GlobalStatistics.
     */
    cursor?: GlobalStatisticsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GlobalStatistics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GlobalStatistics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GlobalStatistics.
     */
    distinct?: GlobalStatisticsScalarFieldEnum | GlobalStatisticsScalarFieldEnum[]
  }

  /**
   * GlobalStatistics findFirstOrThrow
   */
  export type GlobalStatisticsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlobalStatistics
     */
    select?: GlobalStatisticsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GlobalStatistics
     */
    omit?: GlobalStatisticsOmit<ExtArgs> | null
    /**
     * Filter, which GlobalStatistics to fetch.
     */
    where?: GlobalStatisticsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GlobalStatistics to fetch.
     */
    orderBy?: GlobalStatisticsOrderByWithRelationInput | GlobalStatisticsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GlobalStatistics.
     */
    cursor?: GlobalStatisticsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GlobalStatistics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GlobalStatistics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GlobalStatistics.
     */
    distinct?: GlobalStatisticsScalarFieldEnum | GlobalStatisticsScalarFieldEnum[]
  }

  /**
   * GlobalStatistics findMany
   */
  export type GlobalStatisticsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlobalStatistics
     */
    select?: GlobalStatisticsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GlobalStatistics
     */
    omit?: GlobalStatisticsOmit<ExtArgs> | null
    /**
     * Filter, which GlobalStatistics to fetch.
     */
    where?: GlobalStatisticsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GlobalStatistics to fetch.
     */
    orderBy?: GlobalStatisticsOrderByWithRelationInput | GlobalStatisticsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GlobalStatistics.
     */
    cursor?: GlobalStatisticsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GlobalStatistics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GlobalStatistics.
     */
    skip?: number
    distinct?: GlobalStatisticsScalarFieldEnum | GlobalStatisticsScalarFieldEnum[]
  }

  /**
   * GlobalStatistics create
   */
  export type GlobalStatisticsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlobalStatistics
     */
    select?: GlobalStatisticsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GlobalStatistics
     */
    omit?: GlobalStatisticsOmit<ExtArgs> | null
    /**
     * The data needed to create a GlobalStatistics.
     */
    data?: XOR<GlobalStatisticsCreateInput, GlobalStatisticsUncheckedCreateInput>
  }

  /**
   * GlobalStatistics createMany
   */
  export type GlobalStatisticsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GlobalStatistics.
     */
    data: GlobalStatisticsCreateManyInput | GlobalStatisticsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * GlobalStatistics createManyAndReturn
   */
  export type GlobalStatisticsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlobalStatistics
     */
    select?: GlobalStatisticsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GlobalStatistics
     */
    omit?: GlobalStatisticsOmit<ExtArgs> | null
    /**
     * The data used to create many GlobalStatistics.
     */
    data: GlobalStatisticsCreateManyInput | GlobalStatisticsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * GlobalStatistics update
   */
  export type GlobalStatisticsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlobalStatistics
     */
    select?: GlobalStatisticsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GlobalStatistics
     */
    omit?: GlobalStatisticsOmit<ExtArgs> | null
    /**
     * The data needed to update a GlobalStatistics.
     */
    data: XOR<GlobalStatisticsUpdateInput, GlobalStatisticsUncheckedUpdateInput>
    /**
     * Choose, which GlobalStatistics to update.
     */
    where: GlobalStatisticsWhereUniqueInput
  }

  /**
   * GlobalStatistics updateMany
   */
  export type GlobalStatisticsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GlobalStatistics.
     */
    data: XOR<GlobalStatisticsUpdateManyMutationInput, GlobalStatisticsUncheckedUpdateManyInput>
    /**
     * Filter which GlobalStatistics to update
     */
    where?: GlobalStatisticsWhereInput
    /**
     * Limit how many GlobalStatistics to update.
     */
    limit?: number
  }

  /**
   * GlobalStatistics updateManyAndReturn
   */
  export type GlobalStatisticsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlobalStatistics
     */
    select?: GlobalStatisticsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GlobalStatistics
     */
    omit?: GlobalStatisticsOmit<ExtArgs> | null
    /**
     * The data used to update GlobalStatistics.
     */
    data: XOR<GlobalStatisticsUpdateManyMutationInput, GlobalStatisticsUncheckedUpdateManyInput>
    /**
     * Filter which GlobalStatistics to update
     */
    where?: GlobalStatisticsWhereInput
    /**
     * Limit how many GlobalStatistics to update.
     */
    limit?: number
  }

  /**
   * GlobalStatistics upsert
   */
  export type GlobalStatisticsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlobalStatistics
     */
    select?: GlobalStatisticsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GlobalStatistics
     */
    omit?: GlobalStatisticsOmit<ExtArgs> | null
    /**
     * The filter to search for the GlobalStatistics to update in case it exists.
     */
    where: GlobalStatisticsWhereUniqueInput
    /**
     * In case the GlobalStatistics found by the `where` argument doesn't exist, create a new GlobalStatistics with this data.
     */
    create: XOR<GlobalStatisticsCreateInput, GlobalStatisticsUncheckedCreateInput>
    /**
     * In case the GlobalStatistics was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GlobalStatisticsUpdateInput, GlobalStatisticsUncheckedUpdateInput>
  }

  /**
   * GlobalStatistics delete
   */
  export type GlobalStatisticsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlobalStatistics
     */
    select?: GlobalStatisticsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GlobalStatistics
     */
    omit?: GlobalStatisticsOmit<ExtArgs> | null
    /**
     * Filter which GlobalStatistics to delete.
     */
    where: GlobalStatisticsWhereUniqueInput
  }

  /**
   * GlobalStatistics deleteMany
   */
  export type GlobalStatisticsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GlobalStatistics to delete
     */
    where?: GlobalStatisticsWhereInput
    /**
     * Limit how many GlobalStatistics to delete.
     */
    limit?: number
  }

  /**
   * GlobalStatistics without action
   */
  export type GlobalStatisticsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlobalStatistics
     */
    select?: GlobalStatisticsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GlobalStatistics
     */
    omit?: GlobalStatisticsOmit<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    username: 'username',
    password: 'password'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const KeyScalarFieldEnum: {
    id: 'id',
    key: 'key',
    userId: 'userId',
    dateCreated: 'dateCreated'
  };

  export type KeyScalarFieldEnum = (typeof KeyScalarFieldEnum)[keyof typeof KeyScalarFieldEnum]


  export const UserStatisticsScalarFieldEnum: {
    id: 'id',
    userId: 'userId'
  };

  export type UserStatisticsScalarFieldEnum = (typeof UserStatisticsScalarFieldEnum)[keyof typeof UserStatisticsScalarFieldEnum]


  export const GlobalStatisticsScalarFieldEnum: {
    id: 'id',
    caesarEncryptions: 'caesarEncryptions',
    caesarDecryptions: 'caesarDecryptions',
    substitutionEncryptions: 'substitutionEncryptions',
    substitutionDecryptions: 'substitutionDecryptions',
    OTPEncryptions: 'OTPEncryptions',
    OTPDecryptions: 'OTPDecryptions',
    VigenereEncryptions: 'VigenereEncryptions',
    VigenereDecryptions: 'VigenereDecryptions',
    A51Encryptions: 'A51Encryptions',
    A51Decryptions: 'A51Decryptions',
    RC4Encryptions: 'RC4Encryptions',
    RC4Decryptions: 'RC4Decryptions',
    DESEncryptions: 'DESEncryptions',
    DESDecryptions: 'DESDecryptions',
    AESEncryptions: 'AESEncryptions',
    AESDecryptions: 'AESDecryptions',
    TEAEncryptions: 'TEAEncryptions',
    TEADecryptions: 'TEADecryptions'
  };

  export type GlobalStatisticsScalarFieldEnum = (typeof GlobalStatisticsScalarFieldEnum)[keyof typeof GlobalStatisticsScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    email?: StringFilter<"User"> | string
    username?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    keys?: KeyListRelationFilter
    statistics?: UserStatisticsListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    keys?: KeyOrderByRelationAggregateInput
    statistics?: UserStatisticsOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    username?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    keys?: KeyListRelationFilter
    statistics?: UserStatisticsListRelationFilter
  }, "id" | "email" | "username">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    email?: StringWithAggregatesFilter<"User"> | string
    username?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
  }

  export type KeyWhereInput = {
    AND?: KeyWhereInput | KeyWhereInput[]
    OR?: KeyWhereInput[]
    NOT?: KeyWhereInput | KeyWhereInput[]
    id?: IntFilter<"Key"> | number
    key?: StringFilter<"Key"> | string
    userId?: IntFilter<"Key"> | number
    dateCreated?: DateTimeFilter<"Key"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type KeyOrderByWithRelationInput = {
    id?: SortOrder
    key?: SortOrder
    userId?: SortOrder
    dateCreated?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type KeyWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: KeyWhereInput | KeyWhereInput[]
    OR?: KeyWhereInput[]
    NOT?: KeyWhereInput | KeyWhereInput[]
    key?: StringFilter<"Key"> | string
    userId?: IntFilter<"Key"> | number
    dateCreated?: DateTimeFilter<"Key"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type KeyOrderByWithAggregationInput = {
    id?: SortOrder
    key?: SortOrder
    userId?: SortOrder
    dateCreated?: SortOrder
    _count?: KeyCountOrderByAggregateInput
    _avg?: KeyAvgOrderByAggregateInput
    _max?: KeyMaxOrderByAggregateInput
    _min?: KeyMinOrderByAggregateInput
    _sum?: KeySumOrderByAggregateInput
  }

  export type KeyScalarWhereWithAggregatesInput = {
    AND?: KeyScalarWhereWithAggregatesInput | KeyScalarWhereWithAggregatesInput[]
    OR?: KeyScalarWhereWithAggregatesInput[]
    NOT?: KeyScalarWhereWithAggregatesInput | KeyScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Key"> | number
    key?: StringWithAggregatesFilter<"Key"> | string
    userId?: IntWithAggregatesFilter<"Key"> | number
    dateCreated?: DateTimeWithAggregatesFilter<"Key"> | Date | string
  }

  export type UserStatisticsWhereInput = {
    AND?: UserStatisticsWhereInput | UserStatisticsWhereInput[]
    OR?: UserStatisticsWhereInput[]
    NOT?: UserStatisticsWhereInput | UserStatisticsWhereInput[]
    id?: IntFilter<"UserStatistics"> | number
    userId?: IntFilter<"UserStatistics"> | number
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type UserStatisticsOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type UserStatisticsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: UserStatisticsWhereInput | UserStatisticsWhereInput[]
    OR?: UserStatisticsWhereInput[]
    NOT?: UserStatisticsWhereInput | UserStatisticsWhereInput[]
    userId?: IntFilter<"UserStatistics"> | number
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type UserStatisticsOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    _count?: UserStatisticsCountOrderByAggregateInput
    _avg?: UserStatisticsAvgOrderByAggregateInput
    _max?: UserStatisticsMaxOrderByAggregateInput
    _min?: UserStatisticsMinOrderByAggregateInput
    _sum?: UserStatisticsSumOrderByAggregateInput
  }

  export type UserStatisticsScalarWhereWithAggregatesInput = {
    AND?: UserStatisticsScalarWhereWithAggregatesInput | UserStatisticsScalarWhereWithAggregatesInput[]
    OR?: UserStatisticsScalarWhereWithAggregatesInput[]
    NOT?: UserStatisticsScalarWhereWithAggregatesInput | UserStatisticsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"UserStatistics"> | number
    userId?: IntWithAggregatesFilter<"UserStatistics"> | number
  }

  export type GlobalStatisticsWhereInput = {
    AND?: GlobalStatisticsWhereInput | GlobalStatisticsWhereInput[]
    OR?: GlobalStatisticsWhereInput[]
    NOT?: GlobalStatisticsWhereInput | GlobalStatisticsWhereInput[]
    id?: IntFilter<"GlobalStatistics"> | number
    caesarEncryptions?: IntFilter<"GlobalStatistics"> | number
    caesarDecryptions?: IntFilter<"GlobalStatistics"> | number
    substitutionEncryptions?: IntFilter<"GlobalStatistics"> | number
    substitutionDecryptions?: IntFilter<"GlobalStatistics"> | number
    OTPEncryptions?: IntFilter<"GlobalStatistics"> | number
    OTPDecryptions?: IntFilter<"GlobalStatistics"> | number
    VigenereEncryptions?: IntFilter<"GlobalStatistics"> | number
    VigenereDecryptions?: IntFilter<"GlobalStatistics"> | number
    A51Encryptions?: IntFilter<"GlobalStatistics"> | number
    A51Decryptions?: IntFilter<"GlobalStatistics"> | number
    RC4Encryptions?: IntFilter<"GlobalStatistics"> | number
    RC4Decryptions?: IntFilter<"GlobalStatistics"> | number
    DESEncryptions?: IntFilter<"GlobalStatistics"> | number
    DESDecryptions?: IntFilter<"GlobalStatistics"> | number
    AESEncryptions?: IntFilter<"GlobalStatistics"> | number
    AESDecryptions?: IntFilter<"GlobalStatistics"> | number
    TEAEncryptions?: IntFilter<"GlobalStatistics"> | number
    TEADecryptions?: IntFilter<"GlobalStatistics"> | number
  }

  export type GlobalStatisticsOrderByWithRelationInput = {
    id?: SortOrder
    caesarEncryptions?: SortOrder
    caesarDecryptions?: SortOrder
    substitutionEncryptions?: SortOrder
    substitutionDecryptions?: SortOrder
    OTPEncryptions?: SortOrder
    OTPDecryptions?: SortOrder
    VigenereEncryptions?: SortOrder
    VigenereDecryptions?: SortOrder
    A51Encryptions?: SortOrder
    A51Decryptions?: SortOrder
    RC4Encryptions?: SortOrder
    RC4Decryptions?: SortOrder
    DESEncryptions?: SortOrder
    DESDecryptions?: SortOrder
    AESEncryptions?: SortOrder
    AESDecryptions?: SortOrder
    TEAEncryptions?: SortOrder
    TEADecryptions?: SortOrder
  }

  export type GlobalStatisticsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: GlobalStatisticsWhereInput | GlobalStatisticsWhereInput[]
    OR?: GlobalStatisticsWhereInput[]
    NOT?: GlobalStatisticsWhereInput | GlobalStatisticsWhereInput[]
    caesarEncryptions?: IntFilter<"GlobalStatistics"> | number
    caesarDecryptions?: IntFilter<"GlobalStatistics"> | number
    substitutionEncryptions?: IntFilter<"GlobalStatistics"> | number
    substitutionDecryptions?: IntFilter<"GlobalStatistics"> | number
    OTPEncryptions?: IntFilter<"GlobalStatistics"> | number
    OTPDecryptions?: IntFilter<"GlobalStatistics"> | number
    VigenereEncryptions?: IntFilter<"GlobalStatistics"> | number
    VigenereDecryptions?: IntFilter<"GlobalStatistics"> | number
    A51Encryptions?: IntFilter<"GlobalStatistics"> | number
    A51Decryptions?: IntFilter<"GlobalStatistics"> | number
    RC4Encryptions?: IntFilter<"GlobalStatistics"> | number
    RC4Decryptions?: IntFilter<"GlobalStatistics"> | number
    DESEncryptions?: IntFilter<"GlobalStatistics"> | number
    DESDecryptions?: IntFilter<"GlobalStatistics"> | number
    AESEncryptions?: IntFilter<"GlobalStatistics"> | number
    AESDecryptions?: IntFilter<"GlobalStatistics"> | number
    TEAEncryptions?: IntFilter<"GlobalStatistics"> | number
    TEADecryptions?: IntFilter<"GlobalStatistics"> | number
  }, "id">

  export type GlobalStatisticsOrderByWithAggregationInput = {
    id?: SortOrder
    caesarEncryptions?: SortOrder
    caesarDecryptions?: SortOrder
    substitutionEncryptions?: SortOrder
    substitutionDecryptions?: SortOrder
    OTPEncryptions?: SortOrder
    OTPDecryptions?: SortOrder
    VigenereEncryptions?: SortOrder
    VigenereDecryptions?: SortOrder
    A51Encryptions?: SortOrder
    A51Decryptions?: SortOrder
    RC4Encryptions?: SortOrder
    RC4Decryptions?: SortOrder
    DESEncryptions?: SortOrder
    DESDecryptions?: SortOrder
    AESEncryptions?: SortOrder
    AESDecryptions?: SortOrder
    TEAEncryptions?: SortOrder
    TEADecryptions?: SortOrder
    _count?: GlobalStatisticsCountOrderByAggregateInput
    _avg?: GlobalStatisticsAvgOrderByAggregateInput
    _max?: GlobalStatisticsMaxOrderByAggregateInput
    _min?: GlobalStatisticsMinOrderByAggregateInput
    _sum?: GlobalStatisticsSumOrderByAggregateInput
  }

  export type GlobalStatisticsScalarWhereWithAggregatesInput = {
    AND?: GlobalStatisticsScalarWhereWithAggregatesInput | GlobalStatisticsScalarWhereWithAggregatesInput[]
    OR?: GlobalStatisticsScalarWhereWithAggregatesInput[]
    NOT?: GlobalStatisticsScalarWhereWithAggregatesInput | GlobalStatisticsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"GlobalStatistics"> | number
    caesarEncryptions?: IntWithAggregatesFilter<"GlobalStatistics"> | number
    caesarDecryptions?: IntWithAggregatesFilter<"GlobalStatistics"> | number
    substitutionEncryptions?: IntWithAggregatesFilter<"GlobalStatistics"> | number
    substitutionDecryptions?: IntWithAggregatesFilter<"GlobalStatistics"> | number
    OTPEncryptions?: IntWithAggregatesFilter<"GlobalStatistics"> | number
    OTPDecryptions?: IntWithAggregatesFilter<"GlobalStatistics"> | number
    VigenereEncryptions?: IntWithAggregatesFilter<"GlobalStatistics"> | number
    VigenereDecryptions?: IntWithAggregatesFilter<"GlobalStatistics"> | number
    A51Encryptions?: IntWithAggregatesFilter<"GlobalStatistics"> | number
    A51Decryptions?: IntWithAggregatesFilter<"GlobalStatistics"> | number
    RC4Encryptions?: IntWithAggregatesFilter<"GlobalStatistics"> | number
    RC4Decryptions?: IntWithAggregatesFilter<"GlobalStatistics"> | number
    DESEncryptions?: IntWithAggregatesFilter<"GlobalStatistics"> | number
    DESDecryptions?: IntWithAggregatesFilter<"GlobalStatistics"> | number
    AESEncryptions?: IntWithAggregatesFilter<"GlobalStatistics"> | number
    AESDecryptions?: IntWithAggregatesFilter<"GlobalStatistics"> | number
    TEAEncryptions?: IntWithAggregatesFilter<"GlobalStatistics"> | number
    TEADecryptions?: IntWithAggregatesFilter<"GlobalStatistics"> | number
  }

  export type UserCreateInput = {
    email: string
    username: string
    password: string
    keys?: KeyCreateNestedManyWithoutUserInput
    statistics?: UserStatisticsCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    email: string
    username: string
    password: string
    keys?: KeyUncheckedCreateNestedManyWithoutUserInput
    statistics?: UserStatisticsUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    keys?: KeyUpdateManyWithoutUserNestedInput
    statistics?: UserStatisticsUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    keys?: KeyUncheckedUpdateManyWithoutUserNestedInput
    statistics?: UserStatisticsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    email: string
    username: string
    password: string
  }

  export type UserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type KeyCreateInput = {
    key: string
    dateCreated?: Date | string
    user: UserCreateNestedOneWithoutKeysInput
  }

  export type KeyUncheckedCreateInput = {
    id?: number
    key: string
    userId: number
    dateCreated?: Date | string
  }

  export type KeyUpdateInput = {
    key?: StringFieldUpdateOperationsInput | string
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutKeysNestedInput
  }

  export type KeyUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    key?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KeyCreateManyInput = {
    id?: number
    key: string
    userId: number
    dateCreated?: Date | string
  }

  export type KeyUpdateManyMutationInput = {
    key?: StringFieldUpdateOperationsInput | string
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KeyUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    key?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserStatisticsCreateInput = {
    user: UserCreateNestedOneWithoutStatisticsInput
  }

  export type UserStatisticsUncheckedCreateInput = {
    id?: number
    userId: number
  }

  export type UserStatisticsUpdateInput = {
    user?: UserUpdateOneRequiredWithoutStatisticsNestedInput
  }

  export type UserStatisticsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type UserStatisticsCreateManyInput = {
    id?: number
    userId: number
  }

  export type UserStatisticsUpdateManyMutationInput = {

  }

  export type UserStatisticsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type GlobalStatisticsCreateInput = {
    caesarEncryptions?: number
    caesarDecryptions?: number
    substitutionEncryptions?: number
    substitutionDecryptions?: number
    OTPEncryptions?: number
    OTPDecryptions?: number
    VigenereEncryptions?: number
    VigenereDecryptions?: number
    A51Encryptions?: number
    A51Decryptions?: number
    RC4Encryptions?: number
    RC4Decryptions?: number
    DESEncryptions?: number
    DESDecryptions?: number
    AESEncryptions?: number
    AESDecryptions?: number
    TEAEncryptions?: number
    TEADecryptions?: number
  }

  export type GlobalStatisticsUncheckedCreateInput = {
    id?: number
    caesarEncryptions?: number
    caesarDecryptions?: number
    substitutionEncryptions?: number
    substitutionDecryptions?: number
    OTPEncryptions?: number
    OTPDecryptions?: number
    VigenereEncryptions?: number
    VigenereDecryptions?: number
    A51Encryptions?: number
    A51Decryptions?: number
    RC4Encryptions?: number
    RC4Decryptions?: number
    DESEncryptions?: number
    DESDecryptions?: number
    AESEncryptions?: number
    AESDecryptions?: number
    TEAEncryptions?: number
    TEADecryptions?: number
  }

  export type GlobalStatisticsUpdateInput = {
    caesarEncryptions?: IntFieldUpdateOperationsInput | number
    caesarDecryptions?: IntFieldUpdateOperationsInput | number
    substitutionEncryptions?: IntFieldUpdateOperationsInput | number
    substitutionDecryptions?: IntFieldUpdateOperationsInput | number
    OTPEncryptions?: IntFieldUpdateOperationsInput | number
    OTPDecryptions?: IntFieldUpdateOperationsInput | number
    VigenereEncryptions?: IntFieldUpdateOperationsInput | number
    VigenereDecryptions?: IntFieldUpdateOperationsInput | number
    A51Encryptions?: IntFieldUpdateOperationsInput | number
    A51Decryptions?: IntFieldUpdateOperationsInput | number
    RC4Encryptions?: IntFieldUpdateOperationsInput | number
    RC4Decryptions?: IntFieldUpdateOperationsInput | number
    DESEncryptions?: IntFieldUpdateOperationsInput | number
    DESDecryptions?: IntFieldUpdateOperationsInput | number
    AESEncryptions?: IntFieldUpdateOperationsInput | number
    AESDecryptions?: IntFieldUpdateOperationsInput | number
    TEAEncryptions?: IntFieldUpdateOperationsInput | number
    TEADecryptions?: IntFieldUpdateOperationsInput | number
  }

  export type GlobalStatisticsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    caesarEncryptions?: IntFieldUpdateOperationsInput | number
    caesarDecryptions?: IntFieldUpdateOperationsInput | number
    substitutionEncryptions?: IntFieldUpdateOperationsInput | number
    substitutionDecryptions?: IntFieldUpdateOperationsInput | number
    OTPEncryptions?: IntFieldUpdateOperationsInput | number
    OTPDecryptions?: IntFieldUpdateOperationsInput | number
    VigenereEncryptions?: IntFieldUpdateOperationsInput | number
    VigenereDecryptions?: IntFieldUpdateOperationsInput | number
    A51Encryptions?: IntFieldUpdateOperationsInput | number
    A51Decryptions?: IntFieldUpdateOperationsInput | number
    RC4Encryptions?: IntFieldUpdateOperationsInput | number
    RC4Decryptions?: IntFieldUpdateOperationsInput | number
    DESEncryptions?: IntFieldUpdateOperationsInput | number
    DESDecryptions?: IntFieldUpdateOperationsInput | number
    AESEncryptions?: IntFieldUpdateOperationsInput | number
    AESDecryptions?: IntFieldUpdateOperationsInput | number
    TEAEncryptions?: IntFieldUpdateOperationsInput | number
    TEADecryptions?: IntFieldUpdateOperationsInput | number
  }

  export type GlobalStatisticsCreateManyInput = {
    id?: number
    caesarEncryptions?: number
    caesarDecryptions?: number
    substitutionEncryptions?: number
    substitutionDecryptions?: number
    OTPEncryptions?: number
    OTPDecryptions?: number
    VigenereEncryptions?: number
    VigenereDecryptions?: number
    A51Encryptions?: number
    A51Decryptions?: number
    RC4Encryptions?: number
    RC4Decryptions?: number
    DESEncryptions?: number
    DESDecryptions?: number
    AESEncryptions?: number
    AESDecryptions?: number
    TEAEncryptions?: number
    TEADecryptions?: number
  }

  export type GlobalStatisticsUpdateManyMutationInput = {
    caesarEncryptions?: IntFieldUpdateOperationsInput | number
    caesarDecryptions?: IntFieldUpdateOperationsInput | number
    substitutionEncryptions?: IntFieldUpdateOperationsInput | number
    substitutionDecryptions?: IntFieldUpdateOperationsInput | number
    OTPEncryptions?: IntFieldUpdateOperationsInput | number
    OTPDecryptions?: IntFieldUpdateOperationsInput | number
    VigenereEncryptions?: IntFieldUpdateOperationsInput | number
    VigenereDecryptions?: IntFieldUpdateOperationsInput | number
    A51Encryptions?: IntFieldUpdateOperationsInput | number
    A51Decryptions?: IntFieldUpdateOperationsInput | number
    RC4Encryptions?: IntFieldUpdateOperationsInput | number
    RC4Decryptions?: IntFieldUpdateOperationsInput | number
    DESEncryptions?: IntFieldUpdateOperationsInput | number
    DESDecryptions?: IntFieldUpdateOperationsInput | number
    AESEncryptions?: IntFieldUpdateOperationsInput | number
    AESDecryptions?: IntFieldUpdateOperationsInput | number
    TEAEncryptions?: IntFieldUpdateOperationsInput | number
    TEADecryptions?: IntFieldUpdateOperationsInput | number
  }

  export type GlobalStatisticsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    caesarEncryptions?: IntFieldUpdateOperationsInput | number
    caesarDecryptions?: IntFieldUpdateOperationsInput | number
    substitutionEncryptions?: IntFieldUpdateOperationsInput | number
    substitutionDecryptions?: IntFieldUpdateOperationsInput | number
    OTPEncryptions?: IntFieldUpdateOperationsInput | number
    OTPDecryptions?: IntFieldUpdateOperationsInput | number
    VigenereEncryptions?: IntFieldUpdateOperationsInput | number
    VigenereDecryptions?: IntFieldUpdateOperationsInput | number
    A51Encryptions?: IntFieldUpdateOperationsInput | number
    A51Decryptions?: IntFieldUpdateOperationsInput | number
    RC4Encryptions?: IntFieldUpdateOperationsInput | number
    RC4Decryptions?: IntFieldUpdateOperationsInput | number
    DESEncryptions?: IntFieldUpdateOperationsInput | number
    DESDecryptions?: IntFieldUpdateOperationsInput | number
    AESEncryptions?: IntFieldUpdateOperationsInput | number
    AESDecryptions?: IntFieldUpdateOperationsInput | number
    TEAEncryptions?: IntFieldUpdateOperationsInput | number
    TEADecryptions?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type KeyListRelationFilter = {
    every?: KeyWhereInput
    some?: KeyWhereInput
    none?: KeyWhereInput
  }

  export type UserStatisticsListRelationFilter = {
    every?: UserStatisticsWhereInput
    some?: UserStatisticsWhereInput
    none?: UserStatisticsWhereInput
  }

  export type KeyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserStatisticsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type KeyCountOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    userId?: SortOrder
    dateCreated?: SortOrder
  }

  export type KeyAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type KeyMaxOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    userId?: SortOrder
    dateCreated?: SortOrder
  }

  export type KeyMinOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    userId?: SortOrder
    dateCreated?: SortOrder
  }

  export type KeySumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type UserStatisticsCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type UserStatisticsAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type UserStatisticsMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type UserStatisticsMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type UserStatisticsSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type GlobalStatisticsCountOrderByAggregateInput = {
    id?: SortOrder
    caesarEncryptions?: SortOrder
    caesarDecryptions?: SortOrder
    substitutionEncryptions?: SortOrder
    substitutionDecryptions?: SortOrder
    OTPEncryptions?: SortOrder
    OTPDecryptions?: SortOrder
    VigenereEncryptions?: SortOrder
    VigenereDecryptions?: SortOrder
    A51Encryptions?: SortOrder
    A51Decryptions?: SortOrder
    RC4Encryptions?: SortOrder
    RC4Decryptions?: SortOrder
    DESEncryptions?: SortOrder
    DESDecryptions?: SortOrder
    AESEncryptions?: SortOrder
    AESDecryptions?: SortOrder
    TEAEncryptions?: SortOrder
    TEADecryptions?: SortOrder
  }

  export type GlobalStatisticsAvgOrderByAggregateInput = {
    id?: SortOrder
    caesarEncryptions?: SortOrder
    caesarDecryptions?: SortOrder
    substitutionEncryptions?: SortOrder
    substitutionDecryptions?: SortOrder
    OTPEncryptions?: SortOrder
    OTPDecryptions?: SortOrder
    VigenereEncryptions?: SortOrder
    VigenereDecryptions?: SortOrder
    A51Encryptions?: SortOrder
    A51Decryptions?: SortOrder
    RC4Encryptions?: SortOrder
    RC4Decryptions?: SortOrder
    DESEncryptions?: SortOrder
    DESDecryptions?: SortOrder
    AESEncryptions?: SortOrder
    AESDecryptions?: SortOrder
    TEAEncryptions?: SortOrder
    TEADecryptions?: SortOrder
  }

  export type GlobalStatisticsMaxOrderByAggregateInput = {
    id?: SortOrder
    caesarEncryptions?: SortOrder
    caesarDecryptions?: SortOrder
    substitutionEncryptions?: SortOrder
    substitutionDecryptions?: SortOrder
    OTPEncryptions?: SortOrder
    OTPDecryptions?: SortOrder
    VigenereEncryptions?: SortOrder
    VigenereDecryptions?: SortOrder
    A51Encryptions?: SortOrder
    A51Decryptions?: SortOrder
    RC4Encryptions?: SortOrder
    RC4Decryptions?: SortOrder
    DESEncryptions?: SortOrder
    DESDecryptions?: SortOrder
    AESEncryptions?: SortOrder
    AESDecryptions?: SortOrder
    TEAEncryptions?: SortOrder
    TEADecryptions?: SortOrder
  }

  export type GlobalStatisticsMinOrderByAggregateInput = {
    id?: SortOrder
    caesarEncryptions?: SortOrder
    caesarDecryptions?: SortOrder
    substitutionEncryptions?: SortOrder
    substitutionDecryptions?: SortOrder
    OTPEncryptions?: SortOrder
    OTPDecryptions?: SortOrder
    VigenereEncryptions?: SortOrder
    VigenereDecryptions?: SortOrder
    A51Encryptions?: SortOrder
    A51Decryptions?: SortOrder
    RC4Encryptions?: SortOrder
    RC4Decryptions?: SortOrder
    DESEncryptions?: SortOrder
    DESDecryptions?: SortOrder
    AESEncryptions?: SortOrder
    AESDecryptions?: SortOrder
    TEAEncryptions?: SortOrder
    TEADecryptions?: SortOrder
  }

  export type GlobalStatisticsSumOrderByAggregateInput = {
    id?: SortOrder
    caesarEncryptions?: SortOrder
    caesarDecryptions?: SortOrder
    substitutionEncryptions?: SortOrder
    substitutionDecryptions?: SortOrder
    OTPEncryptions?: SortOrder
    OTPDecryptions?: SortOrder
    VigenereEncryptions?: SortOrder
    VigenereDecryptions?: SortOrder
    A51Encryptions?: SortOrder
    A51Decryptions?: SortOrder
    RC4Encryptions?: SortOrder
    RC4Decryptions?: SortOrder
    DESEncryptions?: SortOrder
    DESDecryptions?: SortOrder
    AESEncryptions?: SortOrder
    AESDecryptions?: SortOrder
    TEAEncryptions?: SortOrder
    TEADecryptions?: SortOrder
  }

  export type KeyCreateNestedManyWithoutUserInput = {
    create?: XOR<KeyCreateWithoutUserInput, KeyUncheckedCreateWithoutUserInput> | KeyCreateWithoutUserInput[] | KeyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: KeyCreateOrConnectWithoutUserInput | KeyCreateOrConnectWithoutUserInput[]
    createMany?: KeyCreateManyUserInputEnvelope
    connect?: KeyWhereUniqueInput | KeyWhereUniqueInput[]
  }

  export type UserStatisticsCreateNestedManyWithoutUserInput = {
    create?: XOR<UserStatisticsCreateWithoutUserInput, UserStatisticsUncheckedCreateWithoutUserInput> | UserStatisticsCreateWithoutUserInput[] | UserStatisticsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserStatisticsCreateOrConnectWithoutUserInput | UserStatisticsCreateOrConnectWithoutUserInput[]
    createMany?: UserStatisticsCreateManyUserInputEnvelope
    connect?: UserStatisticsWhereUniqueInput | UserStatisticsWhereUniqueInput[]
  }

  export type KeyUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<KeyCreateWithoutUserInput, KeyUncheckedCreateWithoutUserInput> | KeyCreateWithoutUserInput[] | KeyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: KeyCreateOrConnectWithoutUserInput | KeyCreateOrConnectWithoutUserInput[]
    createMany?: KeyCreateManyUserInputEnvelope
    connect?: KeyWhereUniqueInput | KeyWhereUniqueInput[]
  }

  export type UserStatisticsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserStatisticsCreateWithoutUserInput, UserStatisticsUncheckedCreateWithoutUserInput> | UserStatisticsCreateWithoutUserInput[] | UserStatisticsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserStatisticsCreateOrConnectWithoutUserInput | UserStatisticsCreateOrConnectWithoutUserInput[]
    createMany?: UserStatisticsCreateManyUserInputEnvelope
    connect?: UserStatisticsWhereUniqueInput | UserStatisticsWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type KeyUpdateManyWithoutUserNestedInput = {
    create?: XOR<KeyCreateWithoutUserInput, KeyUncheckedCreateWithoutUserInput> | KeyCreateWithoutUserInput[] | KeyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: KeyCreateOrConnectWithoutUserInput | KeyCreateOrConnectWithoutUserInput[]
    upsert?: KeyUpsertWithWhereUniqueWithoutUserInput | KeyUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: KeyCreateManyUserInputEnvelope
    set?: KeyWhereUniqueInput | KeyWhereUniqueInput[]
    disconnect?: KeyWhereUniqueInput | KeyWhereUniqueInput[]
    delete?: KeyWhereUniqueInput | KeyWhereUniqueInput[]
    connect?: KeyWhereUniqueInput | KeyWhereUniqueInput[]
    update?: KeyUpdateWithWhereUniqueWithoutUserInput | KeyUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: KeyUpdateManyWithWhereWithoutUserInput | KeyUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: KeyScalarWhereInput | KeyScalarWhereInput[]
  }

  export type UserStatisticsUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserStatisticsCreateWithoutUserInput, UserStatisticsUncheckedCreateWithoutUserInput> | UserStatisticsCreateWithoutUserInput[] | UserStatisticsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserStatisticsCreateOrConnectWithoutUserInput | UserStatisticsCreateOrConnectWithoutUserInput[]
    upsert?: UserStatisticsUpsertWithWhereUniqueWithoutUserInput | UserStatisticsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserStatisticsCreateManyUserInputEnvelope
    set?: UserStatisticsWhereUniqueInput | UserStatisticsWhereUniqueInput[]
    disconnect?: UserStatisticsWhereUniqueInput | UserStatisticsWhereUniqueInput[]
    delete?: UserStatisticsWhereUniqueInput | UserStatisticsWhereUniqueInput[]
    connect?: UserStatisticsWhereUniqueInput | UserStatisticsWhereUniqueInput[]
    update?: UserStatisticsUpdateWithWhereUniqueWithoutUserInput | UserStatisticsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserStatisticsUpdateManyWithWhereWithoutUserInput | UserStatisticsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserStatisticsScalarWhereInput | UserStatisticsScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type KeyUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<KeyCreateWithoutUserInput, KeyUncheckedCreateWithoutUserInput> | KeyCreateWithoutUserInput[] | KeyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: KeyCreateOrConnectWithoutUserInput | KeyCreateOrConnectWithoutUserInput[]
    upsert?: KeyUpsertWithWhereUniqueWithoutUserInput | KeyUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: KeyCreateManyUserInputEnvelope
    set?: KeyWhereUniqueInput | KeyWhereUniqueInput[]
    disconnect?: KeyWhereUniqueInput | KeyWhereUniqueInput[]
    delete?: KeyWhereUniqueInput | KeyWhereUniqueInput[]
    connect?: KeyWhereUniqueInput | KeyWhereUniqueInput[]
    update?: KeyUpdateWithWhereUniqueWithoutUserInput | KeyUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: KeyUpdateManyWithWhereWithoutUserInput | KeyUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: KeyScalarWhereInput | KeyScalarWhereInput[]
  }

  export type UserStatisticsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserStatisticsCreateWithoutUserInput, UserStatisticsUncheckedCreateWithoutUserInput> | UserStatisticsCreateWithoutUserInput[] | UserStatisticsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserStatisticsCreateOrConnectWithoutUserInput | UserStatisticsCreateOrConnectWithoutUserInput[]
    upsert?: UserStatisticsUpsertWithWhereUniqueWithoutUserInput | UserStatisticsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserStatisticsCreateManyUserInputEnvelope
    set?: UserStatisticsWhereUniqueInput | UserStatisticsWhereUniqueInput[]
    disconnect?: UserStatisticsWhereUniqueInput | UserStatisticsWhereUniqueInput[]
    delete?: UserStatisticsWhereUniqueInput | UserStatisticsWhereUniqueInput[]
    connect?: UserStatisticsWhereUniqueInput | UserStatisticsWhereUniqueInput[]
    update?: UserStatisticsUpdateWithWhereUniqueWithoutUserInput | UserStatisticsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserStatisticsUpdateManyWithWhereWithoutUserInput | UserStatisticsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserStatisticsScalarWhereInput | UserStatisticsScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutKeysInput = {
    create?: XOR<UserCreateWithoutKeysInput, UserUncheckedCreateWithoutKeysInput>
    connectOrCreate?: UserCreateOrConnectWithoutKeysInput
    connect?: UserWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserUpdateOneRequiredWithoutKeysNestedInput = {
    create?: XOR<UserCreateWithoutKeysInput, UserUncheckedCreateWithoutKeysInput>
    connectOrCreate?: UserCreateOrConnectWithoutKeysInput
    upsert?: UserUpsertWithoutKeysInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutKeysInput, UserUpdateWithoutKeysInput>, UserUncheckedUpdateWithoutKeysInput>
  }

  export type UserCreateNestedOneWithoutStatisticsInput = {
    create?: XOR<UserCreateWithoutStatisticsInput, UserUncheckedCreateWithoutStatisticsInput>
    connectOrCreate?: UserCreateOrConnectWithoutStatisticsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutStatisticsNestedInput = {
    create?: XOR<UserCreateWithoutStatisticsInput, UserUncheckedCreateWithoutStatisticsInput>
    connectOrCreate?: UserCreateOrConnectWithoutStatisticsInput
    upsert?: UserUpsertWithoutStatisticsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutStatisticsInput, UserUpdateWithoutStatisticsInput>, UserUncheckedUpdateWithoutStatisticsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type KeyCreateWithoutUserInput = {
    key: string
    dateCreated?: Date | string
  }

  export type KeyUncheckedCreateWithoutUserInput = {
    id?: number
    key: string
    dateCreated?: Date | string
  }

  export type KeyCreateOrConnectWithoutUserInput = {
    where: KeyWhereUniqueInput
    create: XOR<KeyCreateWithoutUserInput, KeyUncheckedCreateWithoutUserInput>
  }

  export type KeyCreateManyUserInputEnvelope = {
    data: KeyCreateManyUserInput | KeyCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserStatisticsCreateWithoutUserInput = {

  }

  export type UserStatisticsUncheckedCreateWithoutUserInput = {
    id?: number
  }

  export type UserStatisticsCreateOrConnectWithoutUserInput = {
    where: UserStatisticsWhereUniqueInput
    create: XOR<UserStatisticsCreateWithoutUserInput, UserStatisticsUncheckedCreateWithoutUserInput>
  }

  export type UserStatisticsCreateManyUserInputEnvelope = {
    data: UserStatisticsCreateManyUserInput | UserStatisticsCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type KeyUpsertWithWhereUniqueWithoutUserInput = {
    where: KeyWhereUniqueInput
    update: XOR<KeyUpdateWithoutUserInput, KeyUncheckedUpdateWithoutUserInput>
    create: XOR<KeyCreateWithoutUserInput, KeyUncheckedCreateWithoutUserInput>
  }

  export type KeyUpdateWithWhereUniqueWithoutUserInput = {
    where: KeyWhereUniqueInput
    data: XOR<KeyUpdateWithoutUserInput, KeyUncheckedUpdateWithoutUserInput>
  }

  export type KeyUpdateManyWithWhereWithoutUserInput = {
    where: KeyScalarWhereInput
    data: XOR<KeyUpdateManyMutationInput, KeyUncheckedUpdateManyWithoutUserInput>
  }

  export type KeyScalarWhereInput = {
    AND?: KeyScalarWhereInput | KeyScalarWhereInput[]
    OR?: KeyScalarWhereInput[]
    NOT?: KeyScalarWhereInput | KeyScalarWhereInput[]
    id?: IntFilter<"Key"> | number
    key?: StringFilter<"Key"> | string
    userId?: IntFilter<"Key"> | number
    dateCreated?: DateTimeFilter<"Key"> | Date | string
  }

  export type UserStatisticsUpsertWithWhereUniqueWithoutUserInput = {
    where: UserStatisticsWhereUniqueInput
    update: XOR<UserStatisticsUpdateWithoutUserInput, UserStatisticsUncheckedUpdateWithoutUserInput>
    create: XOR<UserStatisticsCreateWithoutUserInput, UserStatisticsUncheckedCreateWithoutUserInput>
  }

  export type UserStatisticsUpdateWithWhereUniqueWithoutUserInput = {
    where: UserStatisticsWhereUniqueInput
    data: XOR<UserStatisticsUpdateWithoutUserInput, UserStatisticsUncheckedUpdateWithoutUserInput>
  }

  export type UserStatisticsUpdateManyWithWhereWithoutUserInput = {
    where: UserStatisticsScalarWhereInput
    data: XOR<UserStatisticsUpdateManyMutationInput, UserStatisticsUncheckedUpdateManyWithoutUserInput>
  }

  export type UserStatisticsScalarWhereInput = {
    AND?: UserStatisticsScalarWhereInput | UserStatisticsScalarWhereInput[]
    OR?: UserStatisticsScalarWhereInput[]
    NOT?: UserStatisticsScalarWhereInput | UserStatisticsScalarWhereInput[]
    id?: IntFilter<"UserStatistics"> | number
    userId?: IntFilter<"UserStatistics"> | number
  }

  export type UserCreateWithoutKeysInput = {
    email: string
    username: string
    password: string
    statistics?: UserStatisticsCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutKeysInput = {
    id?: number
    email: string
    username: string
    password: string
    statistics?: UserStatisticsUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutKeysInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutKeysInput, UserUncheckedCreateWithoutKeysInput>
  }

  export type UserUpsertWithoutKeysInput = {
    update: XOR<UserUpdateWithoutKeysInput, UserUncheckedUpdateWithoutKeysInput>
    create: XOR<UserCreateWithoutKeysInput, UserUncheckedCreateWithoutKeysInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutKeysInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutKeysInput, UserUncheckedUpdateWithoutKeysInput>
  }

  export type UserUpdateWithoutKeysInput = {
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    statistics?: UserStatisticsUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutKeysInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    statistics?: UserStatisticsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutStatisticsInput = {
    email: string
    username: string
    password: string
    keys?: KeyCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutStatisticsInput = {
    id?: number
    email: string
    username: string
    password: string
    keys?: KeyUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutStatisticsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutStatisticsInput, UserUncheckedCreateWithoutStatisticsInput>
  }

  export type UserUpsertWithoutStatisticsInput = {
    update: XOR<UserUpdateWithoutStatisticsInput, UserUncheckedUpdateWithoutStatisticsInput>
    create: XOR<UserCreateWithoutStatisticsInput, UserUncheckedCreateWithoutStatisticsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutStatisticsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutStatisticsInput, UserUncheckedUpdateWithoutStatisticsInput>
  }

  export type UserUpdateWithoutStatisticsInput = {
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    keys?: KeyUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutStatisticsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    keys?: KeyUncheckedUpdateManyWithoutUserNestedInput
  }

  export type KeyCreateManyUserInput = {
    id?: number
    key: string
    dateCreated?: Date | string
  }

  export type UserStatisticsCreateManyUserInput = {
    id?: number
  }

  export type KeyUpdateWithoutUserInput = {
    key?: StringFieldUpdateOperationsInput | string
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KeyUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    key?: StringFieldUpdateOperationsInput | string
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KeyUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    key?: StringFieldUpdateOperationsInput | string
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserStatisticsUpdateWithoutUserInput = {

  }

  export type UserStatisticsUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
  }

  export type UserStatisticsUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}